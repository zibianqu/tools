[ 2016-12-28T13:38:38+08:00 ] 127.0.0.1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.037002s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.030001s ]
INFO: [ app_begin ] --END-- [ RunTime:0.034002s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.1610s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
SQL: INSERT INTO `statisticsip` (`ip`,`date`,`recordtime`) VALUES ('127.0.0.1','20161228','1482903517') [ RunTime:0.0560s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0570s ]
SQL: SELECT * FROM `article` WHERE `status` = 1 ORDER BY id desc LIMIT 6   [ RunTime:0.0760s ]
SQL: SELECT * FROM `article` WHERE `status` = 1 ORDER BY readnum desc,id desc LIMIT 6   [ RunTime:0.1180s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.012001s ]
INFO: [ template_filter ] --END-- [ RunTime:0.014001s ]
NOTIC: [8] Undefined variable: title D:\WWW\tools\Application\Runtime\Cache\Home\2a94b8bda04ff446dcedd42276fc99ee.php 第 56 行.
INFO: [ keyWords ] --START--
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0660s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 30   [ RunTime:0.0040s ]
INFO: Run Home\Behavior\KeyWordsBehavior [ RunTime:0.318018s ]
INFO: [ keyWords ] --END-- [ RunTime:0.320018s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.581033s ]
INFO: [ view_parse ] --END-- [ RunTime:0.584033s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.009000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.011001s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.009001s ]
INFO: [ app_end ] --END-- [ RunTime:0.010001s ]

[ 2016-12-28T13:43:52+08:00 ] 127.0.0.1 /Public/files/imagesVjn835
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001001s ]
INFO: [ app_init ] --END-- [ RunTime:0.003001s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.005000s ]
ERR: 无法加载控制器:Public

[ 2016-12-28T13:43:52+08:00 ] 127.0.0.1 /Public/files/imagesdk09UU
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003001s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.004000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.010001s ]
ERR: 无法加载控制器:Public

[ 2016-12-28T13:44:54+08:00 ] 127.0.0.1 /Public/files/imagesdk09UU
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.004000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
ERR: 无法加载控制器:Public

[ 2016-12-28T13:44:54+08:00 ] 127.0.0.1 /Public/files/imagesVjn835
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
ERR: 无法加载控制器:Public

[ 2016-12-28T13:44:55+08:00 ] 127.0.0.1 /Public/files/imagesVjn835
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003001s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.005000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.008000s ]
ERR: 无法加载控制器:Public

[ 2016-12-28T13:44:55+08:00 ] 127.0.0.1 /Public/files/imagesdk09UU
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.005000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.003000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.008000s ]
ERR: 无法加载控制器:Public

[ 2016-12-28T13:44:55+08:00 ] 127.0.0.1 /Public/files/imagesVjn835
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.007000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.004001s ]
INFO: [ app_begin ] --END-- [ RunTime:0.007001s ]
ERR: 无法加载控制器:Public

[ 2016-12-28T13:44:55+08:00 ] 127.0.0.1 /Public/files/imagesdk09UU
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.005000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002001s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004001s ]
ERR: 无法加载控制器:Public

[ 2016-12-28T13:47:09+08:00 ] 127.0.0.1 /Public/files/images/gC9Akv
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.006001s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
ERR: 无法加载控制器:Public

[ 2016-12-28T13:47:09+08:00 ] 127.0.0.1 /Public/files/images/xUZL4u
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.013001s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002001s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004001s ]
ERR: 无法加载控制器:Public

[ 2016-12-28T14:37:32+08:00 ] 127.0.0.1 /art/article/id/35.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.003000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.007000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0120s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
SQL: SELECT * FROM `article` WHERE `id` = 35 LIMIT 1   [ RunTime:0.0020s ]
SQL: SELECT * FROM `article` WHERE `id` = 35 LIMIT 1   [ RunTime:0.0040s ]
SQL: UPDATE `article` SET `title`='手把手教你使用git GitHub创建管理仓库',`keyword`='git,GitHub创建管理仓库',`content`='&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span style=&quot;font-family:&amp;quot;background-color:#FFFFFF;font-size:12px;line-height:1.5;&quot;&gt;一：&lt;/span&gt;&lt;a href=&quot;http://lib.csdn.net/base/git&quot; class=&quot;replace_word&quot; target=&quot;_blank&quot;&gt;Git&lt;/a&gt;&lt;span style=&quot;font-family:&amp;quot;background-color:#FFFFFF;font-size:12px;line-height:1.5;&quot;&gt;是什么？&lt;/span&gt;
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Git是目前世界上最先进的分布式&lt;a href=&quot;http://lib.csdn.net/base/git&quot; class=&quot;replace_word&quot; target=&quot;_blank&quot;&gt;版本控制&lt;/a&gt;系统。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	二：SVN与Git的最主要的区别？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	三：在windows上如何安装Git？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; msysgit是 windows版的Git,如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/T4yNn3vo8qIY9Y4.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git –&amp;gt; Git Bash”,如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/UBNmU9thdkBRv35.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/pRH9hhFH8ILu88n.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	安装完成后，还需要最后一步设置，在命令行输入如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/aL2cPiKB292ABu0.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;注意：git config&amp;nbsp; –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	四：如何操作？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;一：创建版本库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 所以创建一个版本库也非常简单，如下我是D盘 –&amp;gt; www下 目录下新建一个testgit版本库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/xcNVW0q2xmd2OpO.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	pwd 命令是用于显示当前的目录。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 1. 通过命令 git init 把这个目录变成git可以管理的仓库，如下：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9ucv34I0472pHr4.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/oxhaBR8tRF6I8dj.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;2. 把文件添加到版本库中。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;下面先看下demo如下演示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/bW1S6xuo4k9UUyo.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;如果和上面一样，没有任何提示，说明已经添加成功了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;第二步：用命令 git commit告诉Git，把文件提交到仓库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/zi8Ks0QDz8JI65u.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/f4OuKHRQCYcp98d.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/XMYRmZVGxrME2CX.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git diff readme.txt 如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/j78hskuX2ALZELX.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add&amp;nbsp; 第二步是：git commit)。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/CmOaOqp5OnuV4bC.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	二：版本回退：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	内容为33333333333333.继续执行命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ygobSKM1V95LLs6.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9e4n5q5GJ19LJq9.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/zCaPk69F88n8znC.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset&amp;nbsp; –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset&amp;nbsp; –hard HEAD~100 即可。未回退之前的readme.txt内容如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/bqNmVeExDY9PKby.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如果想回退到上一个版本的命令如下操作：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/D4E4DP7t61l66RK.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	再来查看下 readme.txt内容如下：通过命令cat readme.txt查看
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/gul1sl5XEvD6G2N.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/r9QSKN8gK6zDpwG.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git reset&amp;nbsp; –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog&amp;nbsp; 演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9W13N8oaD64j36j.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git reset&amp;nbsp; –hard 6fcfc89来恢复了。演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9gy2V7HXtZpaJHk.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	可以看到 目前已经是最新的版本了。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	三：理解工作区与暂存区的区别？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	我们前面说过使用Git提交文件到版本库有两步：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; 第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; 第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	我们继续使用demo来演示下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/cHEYb2FvCR97MZK.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Wd01wQQC6x08L5U.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	接着我们可以使用git commit一次性提交到分支上，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/b6k1cSdTYeqzVyV.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	四：Git撤销修改和删除文件操作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	一：撤销修改：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp; 比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6SDyTcm6D1lp158.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset&amp;nbsp; –hard HEAD^
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/rXXJIs1D0b1PvY9.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	可以发现，Git会告诉你，git checkout&amp;nbsp; — file 可以丢弃工作区的修改，如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git checkout&amp;nbsp; –&amp;nbsp; readme.txt,如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Hu3rma7F2CqXR52.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。
	&lt;/li&gt;
	&lt;li&gt;
		另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/zm4Qam52hppkArR.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	注意：命令git checkout — readme.txt 中的 — 很重要，如果没有 — 的话，那么命令变成创建分支了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	二：删除文件。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/oEQlshLdd511UCo.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ioHr8ADHO2OR1k2.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	可以使用如下命令 git checkout&amp;nbsp; — b.txt，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/JF9AR25yb99T7Yq.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	再来看看我们testgit目录，添加了3个文件了。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ICi0rn9l53wVMl2.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	五：远程仓库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	ssh-keygen&amp;nbsp; -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/bM3TCWIbE6tsX9x.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/DCfRA9raqNTgueb.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	点击 Add Key，你就应该可以看到已经添加的key。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6VTWdyBA4bC549C.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		如何添加远程库？
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6DKQ2XtYIO2g6kK.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/pRIf8xfv4Fa84v1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git remote add origin https://github.com/tugenhua0707/testgit.git
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	所有的如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/7h0KhUhU2j1t743.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/f1qYKQ2q8IiaBjg.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	从现在起，只要本地作了提交，就可以通过如下命令：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git push origin master
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	2. 如何从远程库克隆？
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	上面我们了解了先有本地库，后有远程库时候，如何关联远程库。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	首先，登录github，创建一个新的仓库，名字叫testgit2.如下：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/cr1EKI5QNJ4w4P2.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如下，我们看到：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/C415iwESt4RwPX2.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/sNk8m1W5lCKyVza.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	接着在我本地目录下 生成testgit2目录了，如下所示：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/coEQE71lzlBk84o.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	六：创建与合并分支。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	在 &amp;nbsp;版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	首先，我们来创建dev分支，然后切换到dev分支上。如下操作：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/blSlKHYgyoRp84e.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git branch dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git checkout dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/t1q192hWB4a4Kl3.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/YEGuI4Ag1lsVPUN.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/4Ofjv6r6Cdc8DfK.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	合并完成后，我们可以接着删除dev分支了，操作如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/DwLVBv0PR6viCtd.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	总结创建与合并分支命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 查看分支：git branch
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 创建分支：git branch name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 切换分支：git checkout name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	创建+切换分支：git checkout –b name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	合并某分支到当前分支：git merge name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	删除分支：git branch –d name
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		如何解决冲突？
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/pSPPRSr431YK967.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/HBxGZ3Ym5WzOg5o.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我们需要在master分支上来合并fenzhi1，如下操作：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ISCp4guSen0MbJN.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	Git用&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;，=======，&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;标记出不同分支的内容，其中&amp;lt;&amp;lt;&amp;lt;HEAD是指主分支修改的内容，&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/vsAt9Q91C55TyWs.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/KqZZPdaZPkS1Yzf.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 3.分支管理策略。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		创建一个dev分支。
	&lt;/li&gt;
	&lt;li&gt;
		修改readme.txt内容。
	&lt;/li&gt;
	&lt;li&gt;
		添加到暂存区。
	&lt;/li&gt;
	&lt;li&gt;
		切换回主分支(master)。
	&lt;/li&gt;
	&lt;li&gt;
		合并dev分支，使用命令 git merge –no-ff&amp;nbsp; -m “注释” dev
	&lt;/li&gt;
	&lt;li&gt;
		查看历史记录
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	截图如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/8Xa2U28S4RGEZIO.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	七：bug分支：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/VVqK6wUs79a2x4i.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/8aPYh6041LO5ceG.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;所以现在我可以通过创建issue-404分支来修复bug了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/y0MPM94lPYVAmbT.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ZtXWWQF19Sk98gZ.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在，我们回到dev分支上干活了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6P4D2aaGT1BVB8p.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/BgmvI5v69l0aUf5.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。
	&lt;/li&gt;
	&lt;li&gt;
		另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 演示如下
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/FdOp8ccMoiA6pih.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	八：多人协作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		要查看远程库的信息 使用 git remote
	&lt;/li&gt;
	&lt;li&gt;
		要查看远程库的详细信息 使用 git remote –v
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如下演示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Kk2uZpVckjKWKjW.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	一：推送分支：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 使用命令 git push origin master
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	比如我现在的github上的readme.txt代码如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/G45HYfR2BPubh4T.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	本地的readme.txt代码如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/XEu5Lz39y94KrzV.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/jo9RlDYx6j1jqwF.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/sp32vHuvyKtT8cp.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	那么一般情况下，那些分支要推送呢？
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		master分支是主分支，因此要时刻与远程同步。
	&lt;/li&gt;
	&lt;li&gt;
		一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	二：抓取分支：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	但是我首先要把dev分支也要推送到远程去，如下
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Twa7t5t0Q6dSj4e.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	接着进入testgit2目录，进行克隆远程的库到本地来，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/748B1hNluikmF67.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在目录下生成有如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/vEepSi2BsD55bRr.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout&amp;nbsp; –b dev origin/dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如下：
&lt;/p&gt;
&lt;p align=&quot;left&q',`status`='1',`type`='0',`createtime`='1482907043',`author`='小兔',`imgurl`=NULL,`recom`='0',`readnum`='1' WHERE `id` = 35 [ RunTime:0.0060s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<35 and status=1 ) ORDER BY id desc LIMIT 1   [ RunTime:0.0010s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id>35 and status=1 ) ORDER BY id asc LIMIT 1   [ RunTime:0.0000s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<>35 and status=1 and recom=1 ) ORDER BY id desc LIMIT 6   [ RunTime:0.0940s ]
NOTIC: [8] Undefined offset: 0 D:\WWW\tools\Application\Home\Controller\ArtController.class.php 第 84 行.
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
NOTIC: [8] Undefined variable: title D:\WWW\tools\Application\Runtime\Cache\Home\f274c600cf8d13c9d31ff143ea08a211.php 第 45 行.
INFO: [ keyWords ] --START--
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0390s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 30   [ RunTime:0.0110s ]
INFO: Run Home\Behavior\KeyWordsBehavior [ RunTime:0.169010s ]
INFO: [ keyWords ] --END-- [ RunTime:0.172010s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.393022s ]
INFO: [ view_parse ] --END-- [ RunTime:0.396022s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.011001s ]

[ 2016-12-28T14:39:45+08:00 ] 127.0.0.1 /art/article/id/36.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.004000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.003001s ]
INFO: [ app_begin ] --END-- [ RunTime:0.006001s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0050s ]
SQL: SELECT * FROM `article` WHERE `id` = 36 LIMIT 1   [ RunTime:0.0020s ]
SQL: SELECT * FROM `article` WHERE `id` = 36 LIMIT 1   [ RunTime:0.0030s ]
SQL: UPDATE `article` SET `title`=' 手把手教你使用git GitHub创建管理仓库',`keyword`='',`content`='&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;一：&lt;a href=&quot;http://lib.csdn.net/base/git&quot; class=&quot;replace_word&quot; target=&quot;_blank&quot;&gt;Git&lt;/a&gt;是什么？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Git是目前世界上最先进的分布式&lt;a href=&quot;http://lib.csdn.net/base/git&quot; class=&quot;replace_word&quot; target=&quot;_blank&quot;&gt;版本控制&lt;/a&gt;系统。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;二：SVN与Git的最主要的区别？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;三：在windows上如何安装Git？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; msysgit是 windows版的Git,如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/o2sq90a8T1NaPYA.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git –&amp;gt; Git Bash”,如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/lp1nSRj5Ltl3pse.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/csN7xjb2FNqB3tU.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	安装完成后，还需要最后一步设置，在命令行输入如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/2uOKiOzut5eL8Pl.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;&amp;nbsp; &amp;nbsp;注意：&lt;/span&gt;git config&amp;nbsp; –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;四：如何操作？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;一：创建版本库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 所以创建一个版本库也非常简单，如下我是D盘 –&amp;gt; www下 目录下新建一个testgit版本库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/tws0e0u9ARaTECl.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	pwd 命令是用于显示当前的目录。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 1. 通过命令 git init 把这个目录变成git可以管理的仓库，如下：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/2Qx5J5PgxNVVX5m.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/X4k5zhvLhfZ7xqT.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;2. 把文件添加到版本库中。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;下面先看下demo如下演示：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/4O2Dj45iOzM8OD7.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;如果和上面一样，没有任何提示，说明已经添加成功了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;第二步：用命令 git commit告诉Git，把文件提交到仓库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/gSVl34wg2XWifDA.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/e0Mitrw1Hmd18k8.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/m1hOLqCvl1214Bm.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git diff readme.txt 如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/aEtXW9bW0lLhUA1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add&amp;nbsp; 第二步是：git commit)。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/nJM4ab8Mdc1otuY.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	二：版本回退：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	内容为33333333333333.继续执行命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/wlZAYLxGlsVwf31.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/87gLdKTPa49l1wa.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Fm1aewV1pJLFiy1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset&amp;nbsp; –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset&amp;nbsp; –hard HEAD~100 即可。未回退之前的readme.txt内容如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/G1lW1evv9V2MNL5.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如果想回退到上一个版本的命令如下操作：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/VJr1aQKaj61ECTV.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	再来查看下 readme.txt内容如下：通过命令cat readme.txt查看
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/rdkpVcDY9w6rYrW.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/BuLiu73xIEY2hzU.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git reset&amp;nbsp; –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog&amp;nbsp; 演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/YZcHF7wJf99Oyef.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git reset&amp;nbsp; –hard 6fcfc89来恢复了。演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/nXT323O8nV6a4Ri.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以看到 目前已经是最新的版本了。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	三：理解工作区与暂存区的区别？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;工作区：&lt;/span&gt;就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 版本库(Repository)：&lt;/span&gt;工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们前面说过使用Git提交文件到版本库有两步：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; 第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; 第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们继续使用demo来演示下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/b9UuNC0dOH4Bv4I.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/sn5O8GAQ5qZlMw4.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接着我们可以使用git commit一次性提交到分支上，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6AE9HgpXdc76U2d.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	四：Git撤销修改和删除文件操作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;一：撤销修改：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp; 比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ITYmn14E6YL414S.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset&amp;nbsp; –hard HEAD^
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/7ocs9VvtIAh4hM6.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以发现，Git会告诉你，git checkout&amp;nbsp; — file 可以丢弃工作区的修改，如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git checkout&amp;nbsp; –&amp;nbsp; readme.txt,如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/NMjUUcsgS8ZYoAv.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。
	&lt;/li&gt;
	&lt;li&gt;
		另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/4pE2a8uD0X2Dcii.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;注意：&lt;/span&gt;命令git checkout — readme.txt 中的 — 很重要，如果没有 — 的话，那么命令变成创建分支了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;二：删除文件。&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/T8ymcNhSNHAiGOi.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6f7e89Y37MwTd8Y.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以使用如下命令 git checkout&amp;nbsp; — b.txt，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/par21Dv7W1A8IPO.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	再来看看我们testgit目录，添加了3个文件了。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/02urwtw6DVAnJfg.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	五：远程仓库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	ssh-keygen&amp;nbsp; -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/UBOTgNTV5h1ZOri.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/mnef9Tc09uje9eX.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	点击 Add Key，你就应该可以看到已经添加的key。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/S96fD2wzD37Jxpt.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		如何添加远程库？
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/19BeDiENJXE9GNp.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/w2WTA0U431O3zbk.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git remote add origin https://github.com/tugenhua0707/testgit.git
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	所有的如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/7o4qRv4CB7hl9e4.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/O25Yr99V8x0vqUi.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	从现在起，只要本地作了提交，就可以通过如下命令：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git push origin master
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	2. 如何从远程库克隆？
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	上面我们了解了先有本地库，后有远程库时候，如何关联远程库。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	首先，登录github，创建一个新的仓库，名字叫testgit2.如下：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/vzDBsZX3lxyJ11v.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如下，我们看到：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Bjg05Ld6Q81GpGj.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Ct04CpbZV2t0dLN.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接着在我本地目录下 生成testgit2目录了，如下所示：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/70zpZZxzr12cQQ5.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	六：创建与合并分支。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	在 &amp;nbsp;版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	首先，我们来创建dev分支，然后切换到dev分支上。如下操作：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/S2lU108tKpKstcI.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git branch dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git checkout dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/fU0DEn8lf4VK777.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/RcUdLM1njPl7z9j.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6fZSt1kb1xo1QV1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	注意到上面的&lt;span&gt;Fast-forward&lt;/span&gt;信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	合并完成后，我们可以接着删除dev分支了，操作如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/TEJAOfc6j2RCCg6.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	总结创建与合并分支命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 查看分支：git branch
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 创建分支：git branch name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 切换分支：git checkout name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	创建+切换分支：git checkout –b name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	合并某分支到当前分支：git merge name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	删除分支：git branch –d name
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		如何解决冲突？
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/h0r8aI5vhQ41ONc.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/XM7c8z25uGU7pQV.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们需要在master分支上来合并fenzhi1，如下操作：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/F9G24HDyf99wKuF.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	Git用&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;，=======，&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;标记出不同分支的内容，其中&amp;lt;&amp;lt;&amp;lt;HEAD是指主分支修改的内容，&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/1PQZa2cFls2Hw2F.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/u47S787N75cDjTu.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 3.分支管理策略。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		创建一个dev分支。
	&lt;/li&gt;
	&lt;li&gt;
		修改readme.txt内容。
	&lt;/li&gt;
	&lt;li&gt;
		添加到暂存区。
	&lt;/li&gt;
	&lt;li&gt;
		切换回主分支(master)。
	&lt;/li&gt;
	&lt;li&gt;
		合并dev分支，使用命令 git merge –no-ff&amp;nbsp; -m “注释” dev
	&lt;/li&gt;
	&lt;li&gt;
		查看历史记录
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	截图如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/gY6TA89iDmN22aO.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;分支策略：&lt;/span&gt;首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	七：bug分支：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/rWq5N8Ny4JR248p.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/huS12omxQQ5kh5u.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;所以现在我可以通过创建issue-404分支来修复bug了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/T804DWwfvGm18Tg.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/vMwMv1PbOJ3Oo38.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在，我们回到dev分支上干活了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Yc3ia3qFwdvOyl0.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9m5A80QY8ohv7ey.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。
	&lt;/li&gt;
	&lt;li&gt;
		另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 演示如下
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/pEiL0k6SvoM1LO1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	八：多人协作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		要查看远程库的信息 使用 git remote
	&lt;/li&gt;
	&lt;li&gt;
		要查看远程库的详细信息 使用 git remote –v
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如下演示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/RYgKDPzFbH7S4z2.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;一：推送分支：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 使用命令 git push origin master
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	比如我现在的github上的readme.txt代码如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/UzwGTlxdu4RP9H8.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	本地的readme.txt代码如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/EVnJe55uofnQ2NC.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/TO2rUAVBGW8hDgD.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/oAvgBU4Ovr37rqQ.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	那么一般情况下，那些分支要推送呢？
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		master分支是主分支，因此要时刻与远程同步。
	&lt;/li&gt;
	&lt;li&gt;
		一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;二：抓取分支：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	但是我首先要把dev分支也要推送到远程去，如下
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9FF41aJvnTr1dGR.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接着进入testgit2目录，进行克隆远程的库到本地来，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/zcL94SPxKu8F5ql.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在目录下生成有如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/h4M5S4qKZ772s95.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout&amp;nbsp; –b dev origin/dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&q',`status`='1',`type`='0',`createtime`='1482907178',`author`='小兔',`imgurl`=NULL,`recom`='0',`readnum`='1' WHERE `id` = 36 [ RunTime:0.0050s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<36 and status=1 ) ORDER BY id desc LIMIT 1   [ RunTime:0.0010s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id>36 and status=1 ) ORDER BY id asc LIMIT 1   [ RunTime:0.0010s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<>36 and status=1 and recom=1 ) ORDER BY id desc LIMIT 6   [ RunTime:0.0010s ]
NOTIC: [8] Undefined offset: 0 D:\WWW\tools\Application\Home\Controller\ArtController.class.php 第 84 行.
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.002001s ]
INFO: [ template_filter ] --END-- [ RunTime:0.004001s ]
NOTIC: [8] Undefined variable: title D:\WWW\tools\Application\Runtime\Cache\Home\f274c600cf8d13c9d31ff143ea08a211.php 第 45 行.
INFO: [ keyWords ] --START--
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0050s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 30   [ RunTime:0.0010s ]
INFO: Run Home\Behavior\KeyWordsBehavior [ RunTime:0.066004s ]
INFO: [ keyWords ] --END-- [ RunTime:0.068004s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.177010s ]
INFO: [ view_parse ] --END-- [ RunTime:0.179010s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002001s ]
INFO: [ app_end ] --END-- [ RunTime:0.004001s ]

[ 2016-12-28T14:44:46+08:00 ] 127.0.0.1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.002000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004001s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0130s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
SQL: SELECT * FROM `article` WHERE `status` = 1 ORDER BY id desc LIMIT 6   [ RunTime:0.0020s ]
SQL: SELECT * FROM `article` WHERE `status` = 1 ORDER BY readnum desc,id desc LIMIT 6   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
NOTIC: [8] Undefined variable: title D:\WWW\tools\Application\Runtime\Cache\Home\2a94b8bda04ff446dcedd42276fc99ee.php 第 56 行.
INFO: [ keyWords ] --START--
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0060s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 30   [ RunTime:0.0010s ]
INFO: Run Home\Behavior\KeyWordsBehavior [ RunTime:0.063004s ]
INFO: [ keyWords ] --END-- [ RunTime:0.065004s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.224013s ]
INFO: [ view_parse ] --END-- [ RunTime:0.226013s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.005000s ]

[ 2016-12-28T14:44:50+08:00 ] 127.0.0.1 /art/article/id/34.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.003001s ]
INFO: [ app_begin ] --END-- [ RunTime:0.005001s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
SQL: SELECT * FROM `article` WHERE `id` = 34 LIMIT 1   [ RunTime:0.0050s ]
SQL: SELECT * FROM `article` WHERE `id` = 34 LIMIT 1   [ RunTime:0.0020s ]
SQL: UPDATE `article` SET `title`='Composer 的结构、Composer.json详解',`keyword`='Composer 的结构,Composer.json详解',`content`='&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	&lt;a href=&quot;http://phpernotes.com/wp-content/uploads/2013/07/composer-cartoon.gif&quot;&gt;&lt;img src=&quot;http://phpernotes.com/wp-content/uploads/2013/07/composer-cartoon.gif&quot; alt=&quot;composer-cartoon&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	&lt;a href=&quot;http://getcomposer.org/doc/04-schema.md&quot;&gt;这片文章&lt;/a&gt;是 composer.json 中各个字段的说明书。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	一、Root Package（根目录包）
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	根目录包就是在你的项目的根目录由 composer.json 定义的包。主要就是由 composer.json 来定义你的项目的依赖。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	某些字段只能在根目录包的中使用，比如 config 字段，只有根目录包能定义自己的配置。依赖包中的 config 字段是被忽略的。所以 config 字段是 root-only 的。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	如果你克隆了其中一个依赖包并在上面工作，那么这个包就是根目录包。composer.json 还是一样的，但上下文不同。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（注：一个包是不是根目录包，取决于上下文。）
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	二、composer.json 中的各个属性（字段）
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	1、name
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	包的名字。由供应方（vendor）名和项目名组成，用 / 分隔。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	在发布包的时候需要填。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	2、description
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	对包的一个简短描述，通常是一行的长度。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	在发布包的时候需要填。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	3、version
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	包的版本。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	格式必须是 X.Y.Z，选择性后缀：-dev、-alphaN、-betaN、-RCN。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	4、type
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	包的类型，默认为 library。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	包类型用于定制安装逻辑。如果你的包的安装需要一些特殊的逻辑，你可以定义一个定制的类型。它可以是一个 symfony-bundle 的类型，或者 wordpress-plugin，或者 typo3-module。这些类型将被特定的项目所用，它们将提供安装器来安装这些类型的包。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	Composer 支持 3 种类型：
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	library：默认值。它将复制文件到 vendor 目录。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	project：它表示这是个项目，而不是库。比如像 Symfony 标准版这种应用。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	metapackage：一个含有依赖的空包，能触发安装，但不包含文件，不会向文件系统写任何东西。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	composer-install：为其他的定制类型的包提供安装器的包。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	5、keywords
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	一个与包相关的关键词数组。用于包的搜索和过滤。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	可选。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	6、homepage
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	项目的网站 URL。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	可选。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	7、time
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	版本发布时间。必须是 YYYY-MM-DD 或 YYYY-MM-DD HH:MM:SS 格式。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	可选。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	8、license
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	包的许可证。可以是字符串或字符串数组。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	可选，但强烈建议加上。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	9、authors
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	包的作者。是个对象数组。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	每个 author 对象有这些属性：
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	name：作者名字&amp;nbsp;&lt;br /&gt;
email：作者邮箱&amp;nbsp;&lt;br /&gt;
homepage：作者网站 URL&amp;nbsp;&lt;br /&gt;
role：作者在项目中的角色（如：developer 或 translator）
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	10、support
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	各种关于该项目如何获取支持的信息。包含这些属性：
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	email：获取支持的邮箱&amp;nbsp;&lt;br /&gt;
issues：问题跟踪的 URL&amp;nbsp;&lt;br /&gt;
forum：论坛的 URL&amp;nbsp;&lt;br /&gt;
wiki：Wiki 的 URL&amp;nbsp;&lt;br /&gt;
irc：IRC 的频道&amp;nbsp;&lt;br /&gt;
source：查看或下载源码的 URL
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	可选。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	11、Package links
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	依赖包的映射表，由包名映射版本约束。如：
&lt;/p&gt;
&lt;pre&gt;{
    &quot;require&quot;: {
        &quot;monolog/monolog&quot;: &quot;1.0.*&quot;
    }
}&lt;/pre&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（1）require
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	列出包所依赖的包。除非这些依赖已经存在，否则这个包不会被安装。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（2）require-dev（root-only）
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	列出开发这个包（或跑测试等等）所依赖的包。在使用 install 命令时，只有带上 “–dev” 参数才能安装 dev 包。在使用 update 命令时，带上 “–no-dev” 则不更新。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（3）conflict
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	列出包会和哪些包发生冲突。它们将不被允许和你的包一起安装。如果约束了版本，则只会针对特定的版本。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（4）replace
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	列出哪些包要被这个包替代。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（5）provide
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	这个包所推荐的包列表。这个对公共接口最有用，一个包可以依赖一个虚拟的 logger 包，而实现 logger 接口的库可以放到 provide 字段中。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	12、suggest
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	建议一些能让这个包工作的更好或得到增强的包列表。这些信息只在包安装完成时给出，暗示用户可以添加更多包，虽然不是必须要安装的。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	格式是，包名映射文字说明，如：
&lt;/p&gt;
&lt;pre&gt;{
    &quot;suggest&quot;: {
        &quot;monolog/monolog&quot;: &quot;Allows more advanced logging of the application flow&quot;
    }
}&lt;/pre&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	13、autoload
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	提供给 PHP autoloader 的自动加载映射。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	目前支持的有：PSR-0 自动加载规范，classmap 生成器，还有 files。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	PSR-0 是比较推荐的，因为它的优秀的扩展性（在添加新的类的适合，不需要重新生成自动加载器）。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（1）PSR-0
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	在 psr-0 键名下，定义一个命名空间到路径的映射表，相对于包的根目录。注意，这也同样支持 PEAR-style 的没有命名空间的风格。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	请注意命名空间的声明得以  结尾，确保自动加载器正确响应。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	PSR-0 的引用可以在安装或更新时生成的文件中查看：&amp;nbsp;&lt;br /&gt;
vendor/composer/autoload_namespaces.php
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	例子：
&lt;/p&gt;
&lt;pre&gt;{
    &quot;autoload&quot;: {
        &quot;psr-0&quot;: {
            &quot;Monolog&quot;: &quot;src/&quot;,
            &quot;VendorNamespace&quot;: &quot;src/&quot;,
            &quot;Vendor_Namespace_&quot;: &quot;src/&quot;
        }
    }
}&lt;/pre&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	如果你需要在多个目录里查找同一个前缀的命名空间，你可以用数组，如：
&lt;/p&gt;
&lt;pre&gt;{
    &quot;autoload&quot;: {
        &quot;psr-0&quot;: { &quot;Monolog&quot;: [&quot;src/&quot;, &quot;lib/&quot;] }
    }
}&lt;/pre&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	PSR-0 风格并不局限于加载命名空间的声明的东西，也可以用于类这个层级。当库中只有一个在全局命名空间中的类时，这种方式就能用上。比如你有个 PHP 源文件放在项目的根目录，你可以这样声明：
&lt;/p&gt;
&lt;pre&gt;{
    &quot;autoload&quot;: {
        &quot;psr-0&quot;: { &quot;UniqueGlobalClass&quot;: &quot;&quot; }
    }
}&lt;/pre&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	如果你有个目录下全是用命名空间组织的，你可以用空前缀：
&lt;/p&gt;
&lt;pre&gt;{
    &quot;autoload&quot;: {
        &quot;psr-0&quot;: { &quot;&quot;: &quot;src/&quot; }
    }
}&lt;/pre&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（2）Classmap
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	classmap 的引用可以在安装或更新时生成的文件中查看：&amp;nbsp;&lt;br /&gt;
vendor/composer/autoload_classmap.php
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	类映射表是通过扫描指定的目录或文件下的所有的 .php 和 .inc 文件生成的。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	你可以给任何不支持 PSR-0 的库用 classmap 生成器实现自动加载。配置上只要指定类所在的目录或文件即可：
&lt;/p&gt;
&lt;pre&gt;{
    &quot;autoload&quot;: {
        &quot;classmap&quot;: [&quot;src/&quot;, &quot;lib/&quot;, &quot;Something.php&quot;]
    }
}&lt;/pre&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（3）files
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	如果你确定需要在任何请求中都加载某些文件，你可以使用 files 自动加载机制。对于那些包中有些 PHP 函数但不能自动加载时特别有用。例如：
&lt;/p&gt;
&lt;pre&gt;{
    &quot;autoload&quot;: {
        &quot;files&quot;: [&quot;src/MyLibrary/functions.php&quot;]
    }
}&lt;/pre&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	14、include-path
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（将被弃用，它的功能由 autoload 代替。其实就是设置 include_path，可选）
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	15、target-dir
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	指定安装目标路径。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	如果包的根目录是在命名空间下，自动加载就不正确了，所以才有 target-dir 来解决这个问题。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	Symfony 就是个例子。它由很多组件包组成。Yaml 组件是在
&lt;/p&gt;
&lt;pre&gt;SymfonyComponentYaml&lt;/pre&gt;
&lt;span style=&quot;color:#333333;font-family:arial;font-size:15px;line-height:27px;background-color:#FFFFFF;&quot;&gt;&amp;nbsp;&amp;nbsp;命名空间下的，它的根目录是 Yaml 目录。要让自动加载正常工作，我们要确保它不是安装在&lt;/span&gt;&lt;span&gt;&lt;/span&gt; 
&lt;pre&gt;vendor/symfony/yaml&lt;/pre&gt;
&lt;span style=&quot;color:#333333;font-family:arial;font-size:15px;line-height:27px;background-color:#FFFFFF;&quot;&gt;&amp;nbsp;，而是在&lt;/span&gt;&lt;span&gt;&lt;/span&gt; 
&lt;pre&gt;vendor/symfony/yaml/Symfony/Component/Yaml&lt;/pre&gt;
&lt;span style=&quot;color:#333333;font-family:arial;font-size:15px;line-height:27px;background-color:#FFFFFF;&quot;&gt;&amp;nbsp;，这样自动加载器才能从 vendor/symfony/yaml 加载它。&lt;/span&gt;&lt;span&gt;&lt;/span&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	所以要定义 target-dir 如下：
&lt;/p&gt;
&lt;pre&gt;{
    &quot;autoload&quot;: {
        &quot;psr-0&quot;: { &quot;SymfonyComponentYaml&quot;: &quot;&quot; }
    },
    &quot;target-dir&quot;: &quot;Symfony/Component/Yaml&quot;
}&lt;/pre&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	16、minimum-stability（root-only）
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	定义根据稳定性如何过滤包。默认是 stable，如果你信赖一个 dev 包，你需要指明。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	17、prefer-stable（root-only）
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	如果开启，Composer 会在稳定包和不稳定包中选择前者。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	18、repositories（root-only）
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	定制包的仓库地址。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	默认的，Composer 只使用 Packagist 仓库。通过指定仓库地址，你可以从任何地方获取包。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	仓库不能递归。你只能将它们添加到主的 composer.json 中。所依赖包中 composer.json 文件中的仓库定义是被忽略的。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	支持的仓库的类型有：
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（1）composer
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	composer 仓库通过网络提供 packages.json 文件，它包含一个 composer.json 对象的列表，还有额外的 dist 或 source 信息。packages.json 文件通过 PHP 流加载。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（2）vcs
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	版本控制系统仓库，如：git、svn、hg。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（3）pear
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	通过它，你可以导入任何 pear 仓库到你的项目中。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	（4）package
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	如果你依赖一个不支持 composer 的项目，你可以定义一个 package 类型的仓库，然后将 composer.json 对象直接写入。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	完整的例子：
&lt;/p&gt;
&lt;pre&gt;{
    &quot;repositories&quot;: [
        {
            &quot;type&quot;: &quot;composer&quot;,
            &quot;url&quot;: &quot;http://packages.example.com&quot;
        },
        {
            &quot;type&quot;: &quot;composer&quot;,
            &quot;url&quot;: &quot;https://packages.example.com&quot;,
            &quot;options&quot;: {
                &quot;ssl&quot;: {
                    &quot;verify_peer&quot;: &quot;true&quot;
                }
            }
        },
        {
            &quot;type&quot;: &quot;vcs&quot;,
            &quot;url&quot;: &quot;https://github.com/Seldaek/monolog&quot;
        },
        {
            &quot;type&quot;: &quot;pear&quot;,
            &quot;url&quot;: &quot;http://pear2.php.net&quot;
        },
        {
            &quot;type&quot;: &quot;package&quot;,
            &quot;package&quot;: {
                &quot;name&quot;: &quot;smarty/smarty&quot;,
                &quot;version&quot;: &quot;3.1.7&quot;,
                &quot;dist&quot;: {
                    &quot;url&quot;: &quot;http://www.smarty.net/files/Smarty-3.1.7.zip&quot;,
                    &quot;type&quot;: &quot;zip&quot;
                },
                &quot;source&quot;: {
                    &quot;url&quot;: &quot;http://smarty-php.googlecode.com/svn/&quot;,
                    &quot;type&quot;: &quot;svn&quot;,
                    &quot;reference&quot;: &quot;tags/Smarty_3_1_7/distribution/&quot;
                }
            }
        }
    ]
}&lt;/pre&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	19、config（root-only）
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	针对项目的一些配置。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	process-timeout：默认 300 秒，Composer 进程执行超时时间；&amp;nbsp;&lt;br /&gt;
use-include-path：默认 false，如果是 true，Composer 自动加载器也会到 PHP 的 include_path 中查找；&amp;nbsp;&lt;br /&gt;
preferred-install：默认 auto，设置 Composer 安装方式；&amp;nbsp;&lt;br /&gt;
github-protocols：默认 [“git”, “https”]，设置与 github 通信协议；&amp;nbsp;&lt;br /&gt;
github-oauth：设置 oauth；&amp;nbsp;&lt;br /&gt;
vendor-dir：默认 vendor，你可以换成别的；&amp;nbsp;&lt;br /&gt;
bin-dir：默认 vendor/bin，如果项目有二进制文件，会链接到这；&amp;nbsp;&lt;br /&gt;
cache-dir：默认 $home/cache，存放 Composer 运行时产生的缓存；&amp;nbsp;&lt;br /&gt;
cache-files-dir：默认 $cache-dir/files，存放包的 zip 文件；&amp;nbsp;&lt;br /&gt;
cache-repo-dir：默认 $cache-dir/repo，存放仓库元数据；&amp;nbsp;&lt;br /&gt;
cache-vcs-dir：默认 $cache-dir/vcs，存放 vcs 克隆；&amp;nbsp;&lt;br /&gt;
cache-files-ttl：默认六个月，缓存的过期时间；&amp;nbsp;&lt;br /&gt;
cache-files-maxsize：默认 300M；&amp;nbsp;&lt;br /&gt;
notify-no-install：默认 true，从仓库安装包会有个通知，可以关掉；&amp;nbsp;&lt;br /&gt;
discard-changes：默认false，如何处理脏的更新；
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	20、scripts（root-only）
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	Composer 允许你在安装进程中安装钩子脚本，钩子是基于事件的；
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	21、extra
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	供 scripts 消费的额外数据；
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	22、bin
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	指定哪些文件必须被当做二进制文件处理的；
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	23、archive
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	设置创建包时的选项，exclude 属性可以设置排除哪些目录，例如：
&lt;/p&gt;
&lt;pre&gt;{
    &quot;archive&quot;: {
        &quot;exclude&quot;: [&quot;/foo/bar&quot;, &quot;baz&quot;, &quot;/*.test&quot;, &quot;!/foo/bar/baz&quot;]
    }
}&lt;/pre&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	这篇看下来，再看 Symfony 的标准版中的 composer.json，应该了然了吧。
&lt;/p&gt;
&lt;p style=&quot;color:#333333;font-family:arial;font-size:15px;background-color:#FFFFFF;&quot;&gt;
	来源：http://phpernotes.com/php/composer_schema
&lt;/p&gt;',`status`='1',`type`='0',`createtime`='1482744695',`author`='小兔',`imgurl`=NULL,`recom`='0',`readnum`='1' WHERE `id` = 34 [ RunTime:0.0030s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<34 and status=1 ) ORDER BY id desc LIMIT 1   [ RunTime:0.0020s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id>34 and status=1 ) ORDER BY id asc LIMIT 1   [ RunTime:0.0000s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<>34 and status=1 and recom=1 ) ORDER BY id desc LIMIT 6   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.004000s ]
NOTIC: [8] Undefined variable: title D:\WWW\tools\Application\Runtime\Cache\Home\f274c600cf8d13c9d31ff143ea08a211.php 第 45 行.
INFO: [ keyWords ] --START--
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0070s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 30   [ RunTime:0.0010s ]
INFO: Run Home\Behavior\KeyWordsBehavior [ RunTime:0.066004s ]
INFO: [ keyWords ] --END-- [ RunTime:0.068004s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.180010s ]
INFO: [ view_parse ] --END-- [ RunTime:0.181010s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002001s ]
INFO: [ app_end ] --END-- [ RunTime:0.005001s ]

[ 2016-12-28T14:44:56+08:00 ] 127.0.0.1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.005000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.003000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.006000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0060s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
SQL: SELECT * FROM `article` WHERE `status` = 1 ORDER BY id desc LIMIT 6   [ RunTime:0.0060s ]
SQL: SELECT * FROM `article` WHERE `status` = 1 ORDER BY readnum desc,id desc LIMIT 6   [ RunTime:0.0030s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
NOTIC: [8] Undefined variable: title D:\WWW\tools\Application\Runtime\Cache\Home\2a94b8bda04ff446dcedd42276fc99ee.php 第 56 行.
INFO: [ keyWords ] --START--
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0060s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 30   [ RunTime:0.0000s ]
INFO: Run Home\Behavior\KeyWordsBehavior [ RunTime:0.059004s ]
INFO: [ keyWords ] --END-- [ RunTime:0.062004s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.201011s ]
INFO: [ view_parse ] --END-- [ RunTime:0.202011s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.004000s ]
INFO: [ app_end ] --END-- [ RunTime:0.006001s ]

[ 2016-12-28T14:45:01+08:00 ] 127.0.0.1 /art/article/id/36.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.004000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.005001s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0070s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0100s ]
SQL: SELECT * FROM `article` WHERE `id` = 36 LIMIT 1   [ RunTime:0.0020s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<36 and status=1 ) ORDER BY id desc LIMIT 1   [ RunTime:0.0010s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id>36 and status=1 ) ORDER BY id asc LIMIT 1   [ RunTime:0.0010s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<>36 and status=1 and recom=1 ) ORDER BY id desc LIMIT 6   [ RunTime:0.0010s ]
NOTIC: [8] Undefined offset: 0 D:\WWW\tools\Application\Home\Controller\ArtController.class.php 第 84 行.
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
NOTIC: [8] Undefined variable: title D:\WWW\tools\Application\Runtime\Cache\Home\f274c600cf8d13c9d31ff143ea08a211.php 第 45 行.
INFO: [ keyWords ] --START--
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0060s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 30   [ RunTime:0.0010s ]
INFO: Run Home\Behavior\KeyWordsBehavior [ RunTime:0.070004s ]
INFO: [ keyWords ] --END-- [ RunTime:0.072004s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.186011s ]
INFO: [ view_parse ] --END-- [ RunTime:0.189011s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.003000s ]
INFO: [ app_end ] --END-- [ RunTime:0.006000s ]

[ 2016-12-28T14:47:13+08:00 ] 127.0.0.1 /art/article/id/33.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.004000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0070s ]
SQL: SELECT * FROM `article` WHERE `id` = 33 LIMIT 1   [ RunTime:0.0010s ]
SQL: SELECT * FROM `article` WHERE `id` = 33 LIMIT 1   [ RunTime:0.0010s ]
SQL: UPDATE `article` SET `title`='TCP和Http的区别',`keyword`='TCP和Http的区别',`content`='&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	1、TCP连接
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	手机能够使用联网功能是因为手机底层实现了TCP/IP协议，可以使手机终端通过无线网络建立TCP连接。TCP协议可以对上层网络提供接口，使上层网络数据的传输建立在“无差别”的网络之上。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	建立起一个TCP连接需要经过“三次握手”：
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	握 手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连 接之前，TCP&amp;nbsp;连接都将被一直保持下去。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”（过程就不细写 了，就是服务器和客户端交互，最终确定断开）
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&lt;br /&gt;
2、HTTP连接
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	HTTP协议即超文本传送协议(Hypertext&amp;nbsp;Transfer&amp;nbsp;Protocol&amp;nbsp;)，是Web联网的基础，也是手机联网常用的协议之一，HTTP协议是建立在TCP协议之上的一种应用。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	1）在HTTP&amp;nbsp;1.0中，客户端的每次请求都要求建立一次单独的连接，在处理完本次请求后，就自动释放连接。&lt;br /&gt;
&lt;br /&gt;
2）在HTTP&amp;nbsp;1.1中则可以在一次连接中处理多个请求，并且多个请求可以重叠进行，不需要等待一个请求结束后再发送下一个请求。&lt;br /&gt;
&lt;br /&gt;
由 于HTTP在每次请求结束后都会主动释放连接，因此HTTP连接是一种“短连接”，要保持客户端程序的在线状态，需要不断地向服务器发起连接请求。通常的 做法是即时不需要获得任何数据，客户端也保持每隔一段固定的时间向服务器发送一次“保持连接”的请求，服务器在收到该请求后对客户端进行回复，表明知道客 户端“在线”。若服务器长时间无法收到客户端的请求，则认为客户端“下线”，若客户端长时间无法收到服务器的回复，则认为网络已经断开。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&lt;br /&gt;
3、SOCKET原理
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	3.1套接字（socket）概念
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	套接字（socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	应 用层通过传输层进行数据通信时，TCP会遇到同时为多个应用程序进程提供并发服务的问题。多个TCP连接或多个应用程序进程可能需要通过同一个&amp;nbsp;TCP协 议端口传输数据。为了区别不同的应用程序进程和连接，许多计算机操作系统为应用程序与TCP／IP协议交互提供了套接字(Socket)接口。应用层可以 和传输层通过Socket接口，区分来自不同应用程序进程或网络连接的通信，实现数据传输的并发服务。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&lt;br /&gt;
3.2&amp;nbsp;建立socket连接
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&lt;span style=&quot;font-family:Tahoma, Arial, sans-serif;font-size:16px;&quot;&gt;建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket&amp;nbsp;，另一个运行于服务器端，称为ServerSocket&amp;nbsp;。&lt;/span&gt;
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;font-family:Tahoma, Arial, sans-serif;background-color:#FFFFFF;&quot;&gt;
	&lt;br /&gt;
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	连 接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户 端，一旦客户端确认了此描述，双方就正式建立连接。而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&lt;br /&gt;
4、SOCKET连接与TCP连接
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	创建Socket连接时，可以指定使用的传输层协议，Socket可以支持不同的传输层协议（TCP或UDP），当使用TCP协议进行连接时，该Socket连接就是一个TCP连接。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&lt;br /&gt;
5、Socket连接与HTTP连接
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	由 于通常情况下Socket连接就是TCP连接，因此Socket连接一旦建立，通信双方即可开始相互发送数据内容，直到双方连接断开。但在实际网络应用 中，客户端到服务器之间的通信往往需要穿越多个中间节点，例如路由器、网关、防火墙等，大部分防火墙默认会关闭长时间处于非活跃状态的连接而导 致&amp;nbsp;Socket&amp;nbsp;连接断连，因此需要通过轮询告诉网络，该连接处于活跃状态。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	而HTTP连接使用的是“请求—响应”的方式，不仅在请求时需要先建立连接，而且需要客户端向服务器发出请求后，服务器端才能回复数据。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	很 多情况下，需要服务器端主动向客户端推送数据，保持客户端与服务器数据的实时与同步。此时若双方建立的是Socket连接，服务器就可以直接将数据传送给 客户端；若双方建立的是HTTP连接，则服务器需要等到客户端发送一次请求后才能将数据传回给客户端，因此，客户端定时向服务器端发送连接请求，不仅可以 保持在线，同时也是在“询问”服务器是否有新的数据，如果有就将数据传给客户端。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	二：首先，纠正一下我以 前一直误解的概念，我一直以为Http和Tcp是两种不同的，但是地位对等的协议，虽然知道TCP是传输层，而http是应用层今天学习了下，知道了 http是要基于TCP连接基础上的，简单的说，TCP就是单纯建立连接，不涉及任何我们需要请求的实际数据，简单的传输。http是用来收发数据，即实 际应用上来的。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	第一：从传输层，先说下TCP连接，我们要和服务端连接TCP连接，需要通过三次连接，包括：请求，确认，建立连接。即传说中的“三次握手协议”。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	第一次：C发送一个请求连接的位码SYN和一个随机产生的序列号给Seq，然后S收到了这些数据。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	第二次:S收到了这个请求连接的位码，啊呀，有人向我发出请求了么，那我要不要接受他的请求，得实现确认一下，于是，发送了一个确认码&amp;nbsp;ACN（seq+1），和SYN，Seq给C，然后C收到了，这个是第二次连接。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	第三次：C收到了确认的码和之前发送的SYN一比较，偶哟，对上了么，于是他又发送了一个ACN（SEQ+1）给S，S收到以后就确定建立连接，至此，TCP连接建立完成。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	简单就是：请求，确认，连接。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	第二：从实际上的数据应用来说httP:
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	在前面客户端和应用服务器建立TCP连接之后，就需要用http协议来传送数据了，HTTP协议简单来说，还是请求，确认，连接。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	总体就是C发送一个HTTP请求给S，S收到了这个http请求，然后返回给Chttp响应，然后C的中间件或者说浏览器把这些数据渲染成为了网页，展示在用户面前。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	第一：发送一个http请求给S，这个请求包括请求头和请求内容：
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	request&amp;nbsp;header：
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	包括了，1.请求的方法是POST/GET,请求的URL，http协议版本2.请求的数据，和编码方式3是否有cookie和cooies，是否缓存等。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	post和get请求方式的区别是，get把请求内容放在URL后面，但是URL长度有限制。而post是以表单的形势，适合要输入密码之类的，因为不在URL中显示，所以比较安全。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	request&amp;nbsp;body：
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	即请求的内容.
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	第二：S收到了http请求，然后根据请求头，返回http响应。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	response&amp;nbsp;header:包括了1.cookies或者sessions2.状态吗3.内容大小等
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	response&amp;nbsp;body：
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	即响应的内容，包括，JS什么的。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	第三，C收到了以后，就由浏览器完成一系列的渲染，包括执行JS脚本等。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	这就是我所理解的webTCP,HTTP基础知识，待续。。。。。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	三、TCP是底层通讯协议，定义的是数据传输和连接方式的规范&lt;br /&gt;
HTTP是应用层协议，定义的是传输数据的内容的规范&lt;br /&gt;
&lt;br /&gt;
HTTP协议中的数据是利用TCP协议传输的，所以支持HTTP也就一定支持TCP
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	HTTP支持的是www服务&amp;nbsp;&lt;br /&gt;
而TCP/IP是协议&amp;nbsp;&lt;br /&gt;
它是Internet国际互联网络的基础。TCP/IP是网络中使用的基本的通信协议。&amp;nbsp;&lt;br /&gt;
&lt;br /&gt;
TCP/IP实际上是一组协议，它包括上百个各种功能的协议，如：远程登录、文件传输和电子邮件等，而TCP协议和IP协议是保证数据完整传输的两个基本的重要协议。通常说TCP/IP是Internet协议族，而不单单是TCP和IP。
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	&lt;br /&gt;
&lt;/p&gt;
&lt;p style=&quot;font-size:14px;color:#333333;background-color:#FFFFFF;&quot;&gt;
	来源：http://www.myhack58.com/Article/60/63/2014/50072.htm
&lt;/p&gt;
&lt;div&gt;
	&lt;br /&gt;
&lt;/div&gt;',`status`='1',`type`='0',`createtime`='1482313075',`author`='小兔',`imgurl`=NULL,`recom`='0',`readnum`='1' WHERE `id` = 33 [ RunTime:0.0030s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<33 and status=1 ) ORDER BY id desc LIMIT 1   [ RunTime:0.0010s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id>33 and status=1 ) ORDER BY id asc LIMIT 1   [ RunTime:0.0010s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<>33 and status=1 and recom=1 ) ORDER BY id desc LIMIT 6   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
NOTIC: [8] Undefined variable: title D:\WWW\tools\Application\Runtime\Cache\Home\f274c600cf8d13c9d31ff143ea08a211.php 第 45 行.
INFO: [ keyWords ] --START--
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0070s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 30   [ RunTime:0.0010s ]
INFO: Run Home\Behavior\KeyWordsBehavior [ RunTime:0.064003s ]
INFO: [ keyWords ] --END-- [ RunTime:0.065003s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.171010s ]
INFO: [ view_parse ] --END-- [ RunTime:0.173010s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.004000s ]

[ 2016-12-28T14:50:02+08:00 ] 127.0.0.1 /art/article/id/36.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.003000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004001s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0130s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0080s ]
SQL: SELECT * FROM `article` WHERE `id` = 36 LIMIT 1   [ RunTime:0.0030s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<36 and status=1 ) ORDER BY id desc LIMIT 1   [ RunTime:0.0010s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id>36 and status=1 ) ORDER BY id asc LIMIT 1   [ RunTime:0.0030s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<>36 and status=1 and recom=1 ) ORDER BY id desc LIMIT 6   [ RunTime:0.0010s ]
NOTIC: [8] Undefined offset: 0 D:\WWW\tools\Application\Home\Controller\ArtController.class.php 第 84 行.
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001001s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003001s ]
NOTIC: [8] Undefined variable: title D:\WWW\tools\Application\Runtime\Cache\Home\f274c600cf8d13c9d31ff143ea08a211.php 第 45 行.
INFO: [ keyWords ] --START--
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0060s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 30   [ RunTime:0.0020s ]
INFO: Run Home\Behavior\KeyWordsBehavior [ RunTime:0.088005s ]
INFO: [ keyWords ] --END-- [ RunTime:0.090006s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.216012s ]
INFO: [ view_parse ] --END-- [ RunTime:0.219013s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.005000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.003000s ]
INFO: [ app_end ] --END-- [ RunTime:0.007000s ]

