[ 2018-03-12T16:54:30+08:00 ] 127.0.0.1 /
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.013351s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.016881s ]
INFO: [ app_begin ] --END-- [ RunTime:0.016927s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.1265s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20180312 LIMIT 1   [ RunTime:0.0023s ]
SQL: INSERT INTO `statisticsip` (`ip`,`date`,`recordtime`) VALUES ('127.0.0.1','20180312','1520844869') [ RunTime:0.0219s ]
NOTIC: [2] Declaration of Home\Model\TypeModel::save($arr) should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 88 行.
NOTIC: [2] Declaration of Home\Model\TypeModel::delete($id) should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 88 行.
SQL: SHOW COLUMNS FROM `type` [ RunTime:0.0777s ]
NOTIC: [2] Missing argument 1 for Home\Model\TypeModel::lists(), called in D:\WWW\tools\ThinkPHP\Library\Think\Controller.class.php on line 51 and defined D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 83 行.
NOTIC: [8] Undefined variable: arr D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 84 行.
SQL: SELECT * FROM `type` ORDER BY `order` asc,id asc  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0755s ]
SQL: SELECT * FROM `article` WHERE `status` = 1 ORDER BY id desc LIMIT 6   [ RunTime:0.0119s ]
SQL: SELECT * FROM `article` WHERE `status` = 1 ORDER BY readnum desc,id desc LIMIT 6   [ RunTime:0.0087s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000105s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000144s ]
NOTIC: [8] Undefined variable: title D:\WWW\tools\Application\Runtime\Cache\Home\2a94b8bda04ff446dcedd42276fc99ee.php 第 62 行.
INFO: [ keyWords ] --START--
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.1696s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 30   [ RunTime:0.0008s ]
INFO: Run Home\Behavior\KeyWordsBehavior [ RunTime:0.258052s ]
INFO: [ keyWords ] --END-- [ RunTime:0.258107s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.667884s ]
INFO: [ view_parse ] --END-- [ RunTime:0.667958s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.038544s ]
INFO: [ view_filter ] --END-- [ RunTime:0.038648s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.055075s ]
INFO: [ app_end ] --END-- [ RunTime:0.055141s ]

[ 2018-03-12T16:54:34+08:00 ] 127.0.0.1 /art/lists.aspx?t=git&c=1
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000222s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000275s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000299s ]
NOTIC: [2] Declaration of Home\Model\TypeModel::save($arr) should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 10 行.
NOTIC: [2] Declaration of Home\Model\TypeModel::delete($id) should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 10 行.
SQL: SHOW COLUMNS FROM `type` [ RunTime:0.0312s ]
NOTIC: [2] Missing argument 1 for Home\Model\TypeModel::lists(), called in D:\WWW\tools\ThinkPHP\Library\Think\Controller.class.php on line 51 and defined D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 83 行.
NOTIC: [8] Undefined variable: arr D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 84 行.
SQL: SELECT * FROM `type` ORDER BY `order` asc,id asc  [ RunTime:0.0003s ]

[ 2018-03-12T16:54:35+08:00 ] 127.0.0.1 /art/lists.aspx?t=git&c=1
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000213s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000262s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000286s ]
NOTIC: [2] Declaration of Home\Model\TypeModel::save($arr) should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 10 行.
NOTIC: [2] Declaration of Home\Model\TypeModel::delete($id) should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 10 行.
SQL: SHOW COLUMNS FROM `type` [ RunTime:0.0234s ]
NOTIC: [2] Missing argument 1 for Home\Model\TypeModel::lists(), called in D:\WWW\tools\ThinkPHP\Library\Think\Controller.class.php on line 51 and defined D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 83 行.
NOTIC: [8] Undefined variable: arr D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 84 行.
SQL: SELECT * FROM `type` ORDER BY `order` asc,id asc  [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0220s ]
SQL: SELECT * FROM `keywords` WHERE `name` = 'git' LIMIT 1   [ RunTime:0.0003s ]
SQL: UPDATE `keywords` SET `name`='git',`num`='4',`recordtime`='1520844875',`order`='20' WHERE `id` = 37 [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0308s ]
SQL: SELECT * FROM `article` WHERE `title` LIKE '%git%' OR `keyword` LIKE '%git%' ORDER BY id desc LIMIT 0,6   [ RunTime:0.0171s ]
SQL: SELECT COUNT(*) AS tp_count FROM `article` WHERE `title` LIKE '%git%' OR `keyword` LIKE '%git%' LIMIT 1   [ RunTime:0.0006s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 20   [ RunTime:0.0003s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000058s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000087s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.069625s ]
INFO: [ view_parse ] --END-- [ RunTime:0.069666s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000535s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000560s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000381s ]
INFO: [ app_end ] --END-- [ RunTime:0.000413s ]

[ 2018-03-12T16:54:37+08:00 ] 127.0.0.1 /art/lists.aspx?t=git&c=1
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000368s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000335s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000366s ]
NOTIC: [2] Declaration of Home\Model\TypeModel::save($arr) should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 10 行.
NOTIC: [2] Declaration of Home\Model\TypeModel::delete($id) should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 10 行.
SQL: SHOW COLUMNS FROM `type` [ RunTime:0.0317s ]
NOTIC: [2] Missing argument 1 for Home\Model\TypeModel::lists(), called in D:\WWW\tools\ThinkPHP\Library\Think\Controller.class.php on line 51 and defined D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 83 行.
NOTIC: [8] Undefined variable: arr D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 84 行.
SQL: SELECT * FROM `type` ORDER BY `order` asc,id asc  [ RunTime:0.0006s ]

[ 2018-03-12T16:54:42+08:00 ] 127.0.0.1 /art/article/id/42.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000215s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000271s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000297s ]
NOTIC: [2] Declaration of Home\Model\TypeModel::save($arr) should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 10 行.
NOTIC: [2] Declaration of Home\Model\TypeModel::delete($id) should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 10 行.
SQL: SHOW COLUMNS FROM `type` [ RunTime:0.0280s ]
NOTIC: [2] Missing argument 1 for Home\Model\TypeModel::lists(), called in D:\WWW\tools\ThinkPHP\Library\Think\Controller.class.php on line 51 and defined D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 83 行.
NOTIC: [8] Undefined variable: arr D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 84 行.
SQL: SELECT * FROM `type` ORDER BY `order` asc,id asc  [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0179s ]
SQL: SELECT * FROM `article` WHERE `id` = 42 LIMIT 1   [ RunTime:0.0006s ]
SQL: SELECT * FROM `article` WHERE `id` = 42 LIMIT 1   [ RunTime:0.0005s ]
SQL: UPDATE `article` SET `title`='git 常用命令',`keyword`='git',`content`='&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;strong&gt;查看、添加、提交、删除、找回，重置修改文件&lt;/strong&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git help &amp;lt;command&amp;gt; # 显示command的help
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git show # 显示某次提交的内容 git show $id
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git co -- &amp;lt;file&amp;gt; # 抛弃工作区修改
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git co . # 抛弃工作区修改
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git add &amp;lt;file&amp;gt; # 将工作文件修改提交到本地暂存区
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git add . # 将所有修改过的工作文件提交暂存区
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git rm &amp;lt;file&amp;gt; # 从版本库中删除文件
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git rm &amp;lt;file&amp;gt; --cached # 从版本库中删除文件，但不删除文件
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git reset &amp;lt;file&amp;gt; # 从暂存区恢复到工作文件
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git reset -- . # 从暂存区恢复到工作文件
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git ci &amp;lt;file&amp;gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am &quot;some comments&quot;
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git ci --amend # 修改最后一次提交记录
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git revert &amp;lt;$id&amp;gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git revert HEAD # 恢复最后一次提交的状态
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;strong&gt;查看文件diff&lt;/strong&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git diff &amp;lt;file&amp;gt; # 比较当前文件和暂存区文件差异 git diff
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git diff &amp;lt;&lt;span class=&quot;MathJax_Preview&quot; style=&quot;color:inherit;&quot;&gt;&lt;/span&gt;id1&amp;gt;&amp;lt;&lt;span class=&quot;MJX_Assistive_MathML&quot; style=&quot;vertical-align:0px;&quot;&gt;id1&amp;gt;&amp;lt;&lt;/span&gt;id2&amp;gt; # 比较两次提交之间的差异
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git diff &amp;lt;branch1&amp;gt;..&amp;lt;branch2&amp;gt; # 在两个分支之间比较
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git diff --staged # 比较暂存区和版本库差异
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git diff --cached # 比较暂存区和版本库差异
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git diff --stat # 仅仅比较统计信息
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;strong&gt;查看提交记录&lt;/strong&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git log git log &amp;lt;file&amp;gt; # 查看该文件每次提交记录
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git log -p &amp;lt;file&amp;gt; # 查看每次详细修改内容的diff
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git log -p -2 # 查看最近两次详细修改内容的diff
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git log --stat #查看提交统计信息
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;strong&gt;tig&lt;/strong&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	Mac上可以使用tig代替diff和log，brew install tig
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;strong&gt;Git 本地分支管理&lt;/strong&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;strong&gt;查看、切换、创建和删除分支&lt;/strong&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git br -r # 查看远程分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git br &amp;lt;new_branch&amp;gt; # 创建新的分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git br -v # 查看各个分支最后提交信息
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git br --merged # 查看已经被合并到当前分支的分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git br --no-merged # 查看尚未被合并到当前分支的分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git co &amp;lt;branch&amp;gt; # 切换到某个分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git co -b &amp;lt;new_branch&amp;gt; # 创建新的分支，并且切换过去
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git co -b &amp;lt;new_branch&amp;gt; &amp;lt;branch&amp;gt; # 基于branch创建新的new_branch
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git co $id -b &amp;lt;new_branch&amp;gt; # 把某次历史提交记录checkout出来，创建成一个分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git br -d &amp;lt;branch&amp;gt; # 删除某个分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git br -D &amp;lt;branch&amp;gt; # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;strong&gt;&amp;nbsp;分支合并和rebase&lt;/strong&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git merge &amp;lt;branch&amp;gt; # 将branch分支合并到当前分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git rebase master &amp;lt;branch&amp;gt; # 将master rebase到branch，相当于： git co &amp;lt;branch&amp;gt; &amp;amp;&amp;amp; git rebase master &amp;amp;&amp;amp; git co master &amp;amp;&amp;amp; git merge &amp;lt;branch&amp;gt;
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;strong&gt;&amp;nbsp;Git补丁管理(方便在多台机器上开发同步时用)&lt;/strong&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git diff &amp;gt; ../sync.patch # 生成补丁
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git apply ../sync.patch # 打补丁
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git apply --check ../sync.patch #测试补丁能否成功
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;strong&gt;&amp;nbsp;Git暂存管理&lt;/strong&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git stash # 暂存
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git stash list # 列所有stash
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git stash apply # 恢复暂存的内容
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git stash drop # 删除暂存区
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;strong&gt;Git远程分支管理&lt;/strong&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git pull # 抓取远程仓库所有分支更新并合并到本地
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git fetch origin # 抓取远程仓库更新
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git merge origin/master # 将远程主分支合并到本地当前分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git co -b &amp;lt;local_branch&amp;gt; origin/&amp;lt;remote_branch&amp;gt; # 基于远程分支创建本地分支，功能同上
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git push # push所有分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git push origin master # 将本地主分支推到远程主分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git push origin &amp;lt;local_branch&amp;gt; # 创建远程分支， origin是远程仓库名
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git push origin &amp;lt;local_branch&amp;gt;:&amp;lt;remote_branch&amp;gt; # 创建远程分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git push origin :&amp;lt;remote_branch&amp;gt; #先删除本地分支(git br -d &amp;lt;branch&amp;gt;)，然后再push删除远程分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;strong&gt;Git远程仓库管理&lt;/strong&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;span style=&quot;color:#FFFFFF;&quot;&gt;&lt;em&gt;&lt;span class=&quot;wp_keywordlink&quot;&gt;&lt;a href=&quot;http://blog.jobbole.com/6492/&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git remote -v # 查看远程服务器地址和仓库名称
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git remote show origin # 查看远程服务器仓库状态
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm &amp;lt;repository&amp;gt; # 删除远程仓库
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;strong&gt;创建远程仓库&lt;/strong&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	mkdir robbin_site.git &amp;amp;&amp;amp; cd robbin_site.git &amp;amp;&amp;amp; git --bare init # 在服务器创建纯仓库
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git push -u origin master # 客户端首次提交
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git remote set-head origin master # 设置远程仓库的HEAD指向master分支
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	也可以命令设置跟踪远程库和本地库
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git branch --set-upstream master origin/master
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	git branch --set-upstream develop origin/develop
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	&lt;br /&gt;
&lt;/p&gt;
&lt;p style=&quot;color:#393939;font-family:Verdana, Arial, Helvetica, sans-serif;font-size:14px;background-color:#FAF7EF;&quot;&gt;
	来源：http://www.cnblogs.com/cspku/articles/Git_cmds.html
&lt;/p&gt;',`status`='1',`type`='0',`createtime`='1482977890',`author`='小兔',`imgurl`=NULL,`recom`='0',`readnum`='29' WHERE `id` = 42 [ RunTime:0.0014s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<42 and status=1 ) ORDER BY id desc LIMIT 1   [ RunTime:0.0002s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id>42 and status=1 ) ORDER BY id asc LIMIT 1   [ RunTime:0.0001s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<>42 and status=1 and recom=1 ) ORDER BY id desc LIMIT 6   [ RunTime:0.0006s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000214s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000293s ]
NOTIC: [8] Undefined variable: title D:\WWW\tools\Application\Runtime\Cache\Home\f274c600cf8d13c9d31ff143ea08a211.php 第 55 行.
INFO: [ keyWords ] --START--
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0202s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 30   [ RunTime:0.0004s ]
INFO: Run Home\Behavior\KeyWordsBehavior [ RunTime:0.023531s ]
INFO: [ keyWords ] --END-- [ RunTime:0.023582s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.220583s ]
INFO: [ view_parse ] --END-- [ RunTime:0.220615s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000594s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000650s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000835s ]
INFO: [ app_end ] --END-- [ RunTime:0.000893s ]

[ 2018-03-12T16:54:43+08:00 ] 127.0.0.1 /art/async_lists.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000021s ]
INFO: [ app_init ] --END-- [ RunTime:0.000819s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000471s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000518s ]
NOTIC: [2] Declaration of Home\Model\TypeModel::save($arr) should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 10 行.
NOTIC: [2] Declaration of Home\Model\TypeModel::delete($id) should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 10 行.
SQL: SHOW COLUMNS FROM `type` [ RunTime:0.0551s ]
NOTIC: [2] Missing argument 1 for Home\Model\TypeModel::lists(), called in D:\WWW\tools\ThinkPHP\Library\Think\Controller.class.php on line 51 and defined D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 83 行.
NOTIC: [8] Undefined variable: arr D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 84 行.
SQL: SELECT * FROM `type` ORDER BY `order` asc,id asc  [ RunTime:0.0006s ]
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0157s ]
SQL: SELECT * FROM `keywords` WHERE `name` = 'git' LIMIT 1   [ RunTime:0.0004s ]
SQL: UPDATE `keywords` SET `name`='git',`num`='5',`recordtime`='1520844883',`order`='20' WHERE `id` = 37 [ RunTime:0.0003s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0143s ]
SQL: SELECT * FROM `article` WHERE `title` LIKE '%git%' OR `keyword` LIKE '%git%' ORDER BY id desc LIMIT 6,6   [ RunTime:0.0016s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /art/article/id/40.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000018s ]
INFO: [ app_init ] --END-- [ RunTime:0.000428s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000341s ]
INFO: [ app_begin ] --END-- [ RunTime:0.000381s ]
NOTIC: [2] Declaration of Home\Model\TypeModel::save($arr) should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 10 行.
NOTIC: [2] Declaration of Home\Model\TypeModel::delete($id) should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 10 行.
SQL: SHOW COLUMNS FROM `type` [ RunTime:0.0280s ]
NOTIC: [2] Missing argument 1 for Home\Model\TypeModel::lists(), called in D:\WWW\tools\ThinkPHP\Library\Think\Controller.class.php on line 51 and defined D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 83 行.
NOTIC: [8] Undefined variable: arr D:\WWW\tools\Application\Home\Model\TypeModel.class.php 第 84 行.
SQL: SELECT * FROM `type` ORDER BY `order` asc,id asc  [ RunTime:0.0004s ]
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0709s ]
SQL: SELECT * FROM `article` WHERE `id` = 40 LIMIT 1   [ RunTime:0.0009s ]
SQL: SELECT * FROM `article` WHERE `id` = 40 LIMIT 1   [ RunTime:0.0007s ]
SQL: UPDATE `article` SET `title`='一、使用git GitHub创建管理仓库',`keyword`='git,GitHub创建管理仓库',`content`='&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;br /&gt;
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;一：&lt;a href=&quot;http://lib.csdn.net/base/git&quot; class=&quot;replace_word&quot; target=&quot;_blank&quot;&gt;Git&lt;/a&gt;是什么？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Git是目前世界上最先进的分布式&lt;a href=&quot;http://lib.csdn.net/base/git&quot; class=&quot;replace_word&quot; target=&quot;_blank&quot;&gt;版本控制&lt;/a&gt;系统。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;二：SVN与Git的最主要的区别？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;三：在windows上如何安装Git？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; msysgit是 windows版的Git,如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/8x48lqn2LRVL0AP.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git –&amp;gt; Git Bash”,如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/xi6zn8jX09wSfjM.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/PIAkBl1ofc04oW4.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	安装完成后，还需要最后一步设置，在命令行输入如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/2J908MSiaPdX7I0.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;&amp;nbsp; &amp;nbsp;注意：&lt;/span&gt;git config&amp;nbsp; –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;四：如何操作？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;一：创建版本库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 所以创建一个版本库也非常简单，如下我是D盘 –&amp;gt; www下 目录下新建一个testgit版本库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/jYFj8GV0u18qrgC.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	pwd 命令是用于显示当前的目录。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 1. 通过命令 git init 把这个目录变成git可以管理的仓库，如下：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/iaMI1KVJtwYWJw4.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/G5sMFrS1HDRAt8h.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;2. 把文件添加到版本库中。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;下面先看下demo如下演示：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/vhH0q8IBH8x6O0S.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;如果和上面一样，没有任何提示，说明已经添加成功了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;第二步：用命令 git commit告诉Git，把文件提交到仓库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/iDo1PtJ8KRb2RU1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/yG88Eo9NqCFe8Tb.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/r8e5TuO3SZkus4E.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git diff readme.txt 如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/JqLHnPwh2dk8HJr.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add&amp;nbsp; 第二步是：git commit)。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/i1kNV28aXQ10Biz.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	二：版本回退：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	内容为33333333333333.继续执行命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/GrgRzT7m41PbYXl.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/G0bqJwkHX0YN9Zv.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/u5d0n2jKEaAUCZh.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset&amp;nbsp; –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset&amp;nbsp; –hard HEAD~100 即可。未回退之前的readme.txt内容如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/n5dPLmBvuZtIco8.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如果想回退到上一个版本的命令如下操作：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Y898yhU8sZ9tjCI.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	再来查看下 readme.txt内容如下：通过命令cat readme.txt查看
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Qpet9p68bQWVZy9.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/yN7sFW00uJpu8Zw.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git reset&amp;nbsp; –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog&amp;nbsp; 演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/BgbfZ6Vw3xDpI2e.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git reset&amp;nbsp; –hard 6fcfc89来恢复了。演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/HQsf9x40Om9961T.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以看到 目前已经是最新的版本了。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	三：理解工作区与暂存区的区别？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;工作区：&lt;/span&gt;就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 版本库(Repository)：&lt;/span&gt;工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们前面说过使用Git提交文件到版本库有两步：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; 第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; 第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们继续使用demo来演示下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/T3zv8PRTBlHE0P7.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/0Xon8nbuDp6dj29.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接着我们可以使用git commit一次性提交到分支上，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/8MXs0W0Pg91nER2.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	四：Git撤销修改和删除文件操作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;一：撤销修改：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp; 比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/cMQQ1J9128H0brT.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset&amp;nbsp; –hard HEAD^
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/5j6t24FZjmZaZ3r.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以发现，Git会告诉你，git checkout&amp;nbsp; — file 可以丢弃工作区的修改，如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git checkout&amp;nbsp; –&amp;nbsp; readme.txt,如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/S099MuiGMcET8fB.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。
	&lt;/li&gt;
	&lt;li&gt;
		另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/MBkivDC43mdsM2M.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;注意：&lt;/span&gt;命令git checkout — readme.txt 中的 — 很重要，如果没有 — 的话，那么命令变成创建分支了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;二：删除文件。&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9MIylUjU1ww5GpB.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/H8CsbxvepOQS02L.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以使用如下命令 git checkout&amp;nbsp; — b.txt，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/JWXRL0cuT2gGZnw.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	再来看看我们testgit目录，添加了3个文件了。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/0uo3cPRXt8cAO92.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	来源：http://blog.csdn.net/zhang1027963459/article/details/50478340
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
	&lt;a href=&quot;http://115.28.20.111/art/article/id/41.htm&quot;&gt;下一篇&lt;/a&gt; 
&lt;/p&gt;',`status`='1',`type`='0',`createtime`='1482908288',`author`='小兔',`imgurl`=NULL,`recom`='0',`readnum`='25' WHERE `id` = 40 [ RunTime:0.0052s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<40 and status=1 ) ORDER BY id desc LIMIT 1   [ RunTime:0.0005s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id>40 and status=1 ) ORDER BY id asc LIMIT 1   [ RunTime:0.0004s ]
SQL: SELECT `id`,`title` FROM `article` WHERE ( id<>40 and status=1 and recom=1 ) ORDER BY id desc LIMIT 6   [ RunTime:0.0017s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.000233s ]
INFO: [ template_filter ] --END-- [ RunTime:0.000326s ]
NOTIC: [8] Undefined variable: title D:\WWW\tools\Application\Runtime\Cache\Home\f274c600cf8d13c9d31ff143ea08a211.php 第 55 行.
INFO: [ keyWords ] --START--
SQL: SHOW COLUMNS FROM `keywords` [ RunTime:0.0123s ]
NOTIC: [2] Missing argument 1 for Think\Model::where(), called in D:\WWW\tools\Application\Home\Model\CommModel.class.php on line 46 and defined D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1797 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1805 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1808 行.
NOTIC: [8] Undefined variable: where D:\WWW\tools\ThinkPHP\Library\Think\Model.class.php 第 1816 行.
SQL: SELECT * FROM `keywords` ORDER BY `order` asc,num desc LIMIT 30   [ RunTime:0.0003s ]
INFO: Run Home\Behavior\KeyWordsBehavior [ RunTime:0.015440s ]
INFO: [ keyWords ] --END-- [ RunTime:0.015502s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.034210s ]
INFO: [ view_parse ] --END-- [ RunTime:0.034261s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.000345s ]
INFO: [ view_filter ] --END-- [ RunTime:0.000382s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.000589s ]
INFO: [ app_end ] --END-- [ RunTime:0.000635s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/8x48lqn2LRVL0AP.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.000233s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/xi6zn8jX09wSfjM.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000232s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/G5sMFrS1HDRAt8h.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000216s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/vhH0q8IBH8x6O0S.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000211s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/yG88Eo9NqCFe8Tb.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000243s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/iDo1PtJ8KRb2RU1.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000258s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/JqLHnPwh2dk8HJr.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.000233s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/r8e5TuO3SZkus4E.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000020s ]
INFO: [ app_init ] --END-- [ RunTime:0.000382s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/i1kNV28aXQ10Biz.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000007s ]
INFO: [ app_init ] --END-- [ RunTime:0.000212s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/GrgRzT7m41PbYXl.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000207s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/u5d0n2jKEaAUCZh.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000217s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/G0bqJwkHX0YN9Zv.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000223s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/Y898yhU8sZ9tjCI.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000213s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/n5dPLmBvuZtIco8.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000218s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/Qpet9p68bQWVZy9.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000229s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/yN7sFW00uJpu8Zw.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000231s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/BgbfZ6Vw3xDpI2e.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000230s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/T3zv8PRTBlHE0P7.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000208s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/0Xon8nbuDp6dj29.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000207s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/cMQQ1J9128H0brT.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000213s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/8MXs0W0Pg91nER2.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000220s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/5j6t24FZjmZaZ3r.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000208s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/MBkivDC43mdsM2M.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000209s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/9MIylUjU1ww5GpB.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000203s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/JWXRL0cuT2gGZnw.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000209s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/H8CsbxvepOQS02L.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000005s ]
INFO: [ app_init ] --END-- [ RunTime:0.000201s ]

[ 2018-03-12T16:54:52+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/0uo3cPRXt8cAO92.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000006s ]
INFO: [ app_init ] --END-- [ RunTime:0.000229s ]

[ 2018-03-12T16:54:53+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/PIAkBl1ofc04oW4.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000010s ]
INFO: [ app_init ] --END-- [ RunTime:0.000322s ]

[ 2018-03-12T16:54:53+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/2J908MSiaPdX7I0.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000008s ]
INFO: [ app_init ] --END-- [ RunTime:0.000288s ]

[ 2018-03-12T16:54:53+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/jYFj8GV0u18qrgC.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000011s ]
INFO: [ app_init ] --END-- [ RunTime:0.000283s ]

[ 2018-03-12T16:54:53+08:00 ] 127.0.0.1 /Public/files/images/2016/12/28/iaMI1KVJtwYWJw4.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000009s ]
INFO: [ app_init ] --END-- [ RunTime:0.000264s ]

