[ 2016-12-28T13:38:38+08:00 ] 127.0.0.1 /admin
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.048003s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.012001s ]
INFO: [ app_begin ] --END-- [ RunTime:0.014001s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0070s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]

[ 2016-12-28T13:38:39+08:00 ] 127.0.0.1 /admin
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.032002s ]
INFO: [ app_begin ] --END-- [ RunTime:0.035002s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0090s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]

[ 2016-12-28T13:38:40+08:00 ] 127.0.0.1 /admin/login.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0060s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.009000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.011000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.073004s ]
INFO: [ view_parse ] --END-- [ RunTime:0.075005s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.003000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.005000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.004000s ]
INFO: [ app_end ] --END-- [ RunTime:0.008001s ]

[ 2016-12-28T13:38:48+08:00 ] 127.0.0.1 /admin/login/dologin.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0580s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
NOTIC: [2048] Non-static method Admin\Model\AdminModel::adminLogin() should not be called statically, assuming $this from incompatible context D:\WWW\tools\Application\Admin\Controller\LoginController.class.php 第 36 行.
SQL: SHOW COLUMNS FROM `admin` [ RunTime:0.0790s ]
SQL: SELECT * FROM `admin` WHERE `user` = 'admin' LIMIT 1   [ RunTime:0.0010s ]

[ 2016-12-28T13:38:49+08:00 ] 127.0.0.1 /admin/login/dologin.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0000s ]
NOTIC: [2048] Non-static method Admin\Model\AdminModel::adminLogin() should not be called statically, assuming $this from incompatible context D:\WWW\tools\Application\Admin\Controller\LoginController.class.php 第 36 行.
SQL: SHOW COLUMNS FROM `admin` [ RunTime:0.0050s ]
SQL: SELECT * FROM `admin` WHERE `user` = 'admin' LIMIT 1   [ RunTime:0.0010s ]

[ 2016-12-28T13:38:50+08:00 ] 127.0.0.1 /admin/login/dologin.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.005000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0100s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
NOTIC: [2048] Non-static method Admin\Model\AdminModel::adminLogin() should not be called statically, assuming $this from incompatible context D:\WWW\tools\Application\Admin\Controller\LoginController.class.php 第 36 行.
SQL: SHOW COLUMNS FROM `admin` [ RunTime:0.0090s ]
SQL: SELECT * FROM `admin` WHERE `user` = 'admin' LIMIT 1   [ RunTime:0.0010s ]

[ 2016-12-28T13:38:51+08:00 ] 127.0.0.1 /admin/login/dologin.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0120s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
NOTIC: [2048] Non-static method Admin\Model\AdminModel::adminLogin() should not be called statically, assuming $this from incompatible context D:\WWW\tools\Application\Admin\Controller\LoginController.class.php 第 36 行.
SQL: SHOW COLUMNS FROM `admin` [ RunTime:0.0070s ]
SQL: SELECT * FROM `admin` WHERE `user` = 'admin' LIMIT 1   [ RunTime:0.0010s ]

[ 2016-12-28T13:38:52+08:00 ] 127.0.0.1 /admin/index.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.076005s ]
INFO: [ view_parse ] --END-- [ RunTime:0.078005s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001000s ]
INFO: [ app_end ] --END-- [ RunTime:0.003000s ]

[ 2016-12-28T13:38:53+08:00 ] 127.0.0.1 /admin/login/dologin.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.004001s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003001s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0120s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
NOTIC: [2048] Non-static method Admin\Model\AdminModel::adminLogin() should not be called statically, assuming $this from incompatible context D:\WWW\tools\Application\Admin\Controller\LoginController.class.php 第 36 行.
SQL: SHOW COLUMNS FROM `admin` [ RunTime:0.0090s ]
SQL: SELECT * FROM `admin` WHERE `user` = 'admin' LIMIT 1   [ RunTime:0.0010s ]

[ 2016-12-28T13:38:54+08:00 ] 127.0.0.1 /admin/login/dologin.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0070s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
NOTIC: [2048] Non-static method Admin\Model\AdminModel::adminLogin() should not be called statically, assuming $this from incompatible context D:\WWW\tools\Application\Admin\Controller\LoginController.class.php 第 36 行.
SQL: SHOW COLUMNS FROM `admin` [ RunTime:0.0080s ]
SQL: SELECT * FROM `admin` WHERE `user` = 'admin' LIMIT 1   [ RunTime:0.0010s ]

[ 2016-12-28T13:38:55+08:00 ] 127.0.0.1 /admin/index.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.002000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001001s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004001s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0100s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.056003s ]
INFO: [ view_parse ] --END-- [ RunTime:0.058003s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004001s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.004000s ]

[ 2016-12-28T13:38:57+08:00 ] 127.0.0.1 /admin/index.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003001s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.069004s ]
INFO: [ view_parse ] --END-- [ RunTime:0.072005s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.003000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.007000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.004000s ]

[ 2016-12-28T13:38:58+08:00 ] 127.0.0.1 /admin/index.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.002000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.054003s ]
INFO: [ view_parse ] --END-- [ RunTime:0.056003s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.004000s ]

[ 2016-12-28T13:38:59+08:00 ] 127.0.0.1 /admin/index.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.005000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0030s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003001s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.054003s ]
INFO: [ view_parse ] --END-- [ RunTime:0.056003s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001000s ]
INFO: [ app_end ] --END-- [ RunTime:0.003000s ]

[ 2016-12-28T13:39:00+08:00 ] 127.0.0.1 /admin/index.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0100s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.055003s ]
INFO: [ view_parse ] --END-- [ RunTime:0.057003s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001000s ]
INFO: [ app_end ] --END-- [ RunTime:0.003000s ]

[ 2016-12-28T13:40:31+08:00 ] 127.0.0.1 /admin/index.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.004000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0130s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.052002s ]
INFO: [ view_parse ] --END-- [ RunTime:0.054004s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001000s ]
INFO: [ app_end ] --END-- [ RunTime:0.003000s ]

[ 2016-12-28T13:40:34+08:00 ] 127.0.0.1 /admin/index/lists.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.005000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0120s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::save() should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::delete() should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
NOTIC: [8] Undefined variable: arr D:\WWW\tools\Application\Admin\Controller\IndexController.class.php 第 96 行.
SQL: SELECT * FROM `article` ORDER BY id desc LIMIT 0,10   [ RunTime:0.0040s ]
SQL: SELECT COUNT(*) AS tp_count FROM `article` LIMIT 1   [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.002000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.004000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.144008s ]
INFO: [ view_parse ] --END-- [ RunTime:0.146009s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.005000s ]

[ 2016-12-28T13:40:38+08:00 ] 127.0.0.1 /admin/index/article.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003001s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0120s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.083005s ]
INFO: [ view_parse ] --END-- [ RunTime:0.085005s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.007001s ]

[ 2016-12-28T13:42:30+08:00 ] 127.0.0.1 /admin/index/article.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.004000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0100s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.002000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.005001s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.118007s ]
INFO: [ view_parse ] --END-- [ RunTime:0.121007s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.003000s ]
INFO: [ app_end ] --END-- [ RunTime:0.005000s ]

[ 2016-12-28T13:49:39+08:00 ] 127.0.0.1 /admin/index/article.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0120s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.004000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.070004s ]
INFO: [ view_parse ] --END-- [ RunTime:0.072005s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.005001s ]
INFO: [ app_end ] --END-- [ RunTime:0.010001s ]

[ 2016-12-28T13:51:44+08:00 ] 127.0.0.1 /admin/index/lists.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0120s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::save() should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::delete() should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
NOTIC: [8] Undefined variable: arr D:\WWW\tools\Application\Admin\Controller\IndexController.class.php 第 96 行.
SQL: SELECT * FROM `article` ORDER BY id desc LIMIT 0,10   [ RunTime:0.0090s ]
SQL: SELECT COUNT(*) AS tp_count FROM `article` LIMIT 1   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.002000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.004000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.137008s ]
INFO: [ view_parse ] --END-- [ RunTime:0.139008s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.007000s ]

[ 2016-12-28T13:53:52+08:00 ] 127.0.0.1 /admin/index/article.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.002001s ]
INFO: [ template_filter ] --END-- [ RunTime:0.004001s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.090005s ]
INFO: [ view_parse ] --END-- [ RunTime:0.093005s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.005000s ]
INFO: [ app_end ] --END-- [ RunTime:0.018001s ]

[ 2016-12-28T13:55:23+08:00 ] 127.0.0.1 /admin/index/Public/files/images/97TAnY.jpg
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.004000s ]

[ 2016-12-28T13:56:19+08:00 ] 127.0.0.1 /admin/index/article.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003001s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0130s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.100006s ]
INFO: [ view_parse ] --END-- [ RunTime:0.105006s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.003001s ]
INFO: [ view_filter ] --END-- [ RunTime:0.005001s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.005000s ]
INFO: [ app_end ] --END-- [ RunTime:0.007000s ]

[ 2016-12-28T14:14:22+08:00 ] 127.0.0.1 /admin/index/article.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0070s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.002000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.004001s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.069004s ]
INFO: [ view_parse ] --END-- [ RunTime:0.071004s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.003000s ]
INFO: [ app_end ] --END-- [ RunTime:0.007000s ]

[ 2016-12-28T14:37:24+08:00 ] 127.0.0.1 /admin/index/SaveArticle.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0670s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::save() should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::delete() should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0540s ]
SQL: INSERT INTO `article` (`type`,`title`,`keyword`,`author`,`content`,`createtime`) VALUES ('0','手把手教你使用git GitHub创建管理仓库','git,GitHub创建管理仓库','小兔','&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span style=&quot;font-family:&amp;quot;background-color:#FFFFFF;font-size:12px;line-height:1.5;&quot;&gt;一：&lt;/span&gt;&lt;a href=&quot;http://lib.csdn.net/base/git&quot; class=&quot;replace_word&quot; target=&quot;_blank&quot;&gt;Git&lt;/a&gt;&lt;span style=&quot;font-family:&amp;quot;background-color:#FFFFFF;font-size:12px;line-height:1.5;&quot;&gt;是什么？&lt;/span&gt;
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Git是目前世界上最先进的分布式&lt;a href=&quot;http://lib.csdn.net/base/git&quot; class=&quot;replace_word&quot; target=&quot;_blank&quot;&gt;版本控制&lt;/a&gt;系统。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	二：SVN与Git的最主要的区别？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	三：在windows上如何安装Git？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; msysgit是 windows版的Git,如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/T4yNn3vo8qIY9Y4.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git –&amp;gt; Git Bash”,如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/UBNmU9thdkBRv35.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/pRH9hhFH8ILu88n.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	安装完成后，还需要最后一步设置，在命令行输入如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/aL2cPiKB292ABu0.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;注意：git config&amp;nbsp; –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	四：如何操作？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;一：创建版本库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 所以创建一个版本库也非常简单，如下我是D盘 –&amp;gt; www下 目录下新建一个testgit版本库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/xcNVW0q2xmd2OpO.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	pwd 命令是用于显示当前的目录。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 1. 通过命令 git init 把这个目录变成git可以管理的仓库，如下：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9ucv34I0472pHr4.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/oxhaBR8tRF6I8dj.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;2. 把文件添加到版本库中。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;下面先看下demo如下演示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/bW1S6xuo4k9UUyo.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;如果和上面一样，没有任何提示，说明已经添加成功了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;第二步：用命令 git commit告诉Git，把文件提交到仓库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/zi8Ks0QDz8JI65u.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/f4OuKHRQCYcp98d.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/XMYRmZVGxrME2CX.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git diff readme.txt 如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/j78hskuX2ALZELX.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add&amp;nbsp; 第二步是：git commit)。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/CmOaOqp5OnuV4bC.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	二：版本回退：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	内容为33333333333333.继续执行命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ygobSKM1V95LLs6.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9e4n5q5GJ19LJq9.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/zCaPk69F88n8znC.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset&amp;nbsp; –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset&amp;nbsp; –hard HEAD~100 即可。未回退之前的readme.txt内容如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/bqNmVeExDY9PKby.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如果想回退到上一个版本的命令如下操作：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/D4E4DP7t61l66RK.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	再来查看下 readme.txt内容如下：通过命令cat readme.txt查看
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/gul1sl5XEvD6G2N.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/r9QSKN8gK6zDpwG.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git reset&amp;nbsp; –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog&amp;nbsp; 演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9W13N8oaD64j36j.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git reset&amp;nbsp; –hard 6fcfc89来恢复了。演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9gy2V7HXtZpaJHk.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	可以看到 目前已经是最新的版本了。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	三：理解工作区与暂存区的区别？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	我们前面说过使用Git提交文件到版本库有两步：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; 第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; 第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	我们继续使用demo来演示下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/cHEYb2FvCR97MZK.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Wd01wQQC6x08L5U.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	接着我们可以使用git commit一次性提交到分支上，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/b6k1cSdTYeqzVyV.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	四：Git撤销修改和删除文件操作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	一：撤销修改：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp; 比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6SDyTcm6D1lp158.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset&amp;nbsp; –hard HEAD^
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/rXXJIs1D0b1PvY9.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	可以发现，Git会告诉你，git checkout&amp;nbsp; — file 可以丢弃工作区的修改，如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git checkout&amp;nbsp; –&amp;nbsp; readme.txt,如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Hu3rma7F2CqXR52.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。
	&lt;/li&gt;
	&lt;li&gt;
		另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/zm4Qam52hppkArR.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	注意：命令git checkout — readme.txt 中的 — 很重要，如果没有 — 的话，那么命令变成创建分支了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	二：删除文件。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/oEQlshLdd511UCo.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ioHr8ADHO2OR1k2.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	可以使用如下命令 git checkout&amp;nbsp; — b.txt，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/JF9AR25yb99T7Yq.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	再来看看我们testgit目录，添加了3个文件了。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ICi0rn9l53wVMl2.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	五：远程仓库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	ssh-keygen&amp;nbsp; -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/bM3TCWIbE6tsX9x.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/DCfRA9raqNTgueb.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	点击 Add Key，你就应该可以看到已经添加的key。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6VTWdyBA4bC549C.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		如何添加远程库？
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6DKQ2XtYIO2g6kK.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/pRIf8xfv4Fa84v1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git remote add origin https://github.com/tugenhua0707/testgit.git
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	所有的如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/7h0KhUhU2j1t743.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/f1qYKQ2q8IiaBjg.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	从现在起，只要本地作了提交，就可以通过如下命令：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git push origin master
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	2. 如何从远程库克隆？
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	上面我们了解了先有本地库，后有远程库时候，如何关联远程库。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	首先，登录github，创建一个新的仓库，名字叫testgit2.如下：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/cr1EKI5QNJ4w4P2.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如下，我们看到：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/C415iwESt4RwPX2.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/sNk8m1W5lCKyVza.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	接着在我本地目录下 生成testgit2目录了，如下所示：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/coEQE71lzlBk84o.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	六：创建与合并分支。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	在 &amp;nbsp;版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	首先，我们来创建dev分支，然后切换到dev分支上。如下操作：
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/blSlKHYgyoRp84e.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git branch dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git checkout dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/t1q192hWB4a4Kl3.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/YEGuI4Ag1lsVPUN.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/4Ofjv6r6Cdc8DfK.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	合并完成后，我们可以接着删除dev分支了，操作如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/DwLVBv0PR6viCtd.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	总结创建与合并分支命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 查看分支：git branch
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 创建分支：git branch name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 切换分支：git checkout name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	创建+切换分支：git checkout –b name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	合并某分支到当前分支：git merge name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	删除分支：git branch –d name
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		如何解决冲突？
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/pSPPRSr431YK967.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/HBxGZ3Ym5WzOg5o.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我们需要在master分支上来合并fenzhi1，如下操作：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ISCp4guSen0MbJN.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	Git用&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;，=======，&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;标记出不同分支的内容，其中&amp;lt;&amp;lt;&amp;lt;HEAD是指主分支修改的内容，&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/vsAt9Q91C55TyWs.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/KqZZPdaZPkS1Yzf.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 3.分支管理策略。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		创建一个dev分支。
	&lt;/li&gt;
	&lt;li&gt;
		修改readme.txt内容。
	&lt;/li&gt;
	&lt;li&gt;
		添加到暂存区。
	&lt;/li&gt;
	&lt;li&gt;
		切换回主分支(master)。
	&lt;/li&gt;
	&lt;li&gt;
		合并dev分支，使用命令 git merge –no-ff&amp;nbsp; -m “注释” dev
	&lt;/li&gt;
	&lt;li&gt;
		查看历史记录
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	截图如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/8Xa2U28S4RGEZIO.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	七：bug分支：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/VVqK6wUs79a2x4i.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/8aPYh6041LO5ceG.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;所以现在我可以通过创建issue-404分支来修复bug了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/y0MPM94lPYVAmbT.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ZtXWWQF19Sk98gZ.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在，我们回到dev分支上干活了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6P4D2aaGT1BVB8p.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/BgmvI5v69l0aUf5.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。
	&lt;/li&gt;
	&lt;li&gt;
		另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 演示如下
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/FdOp8ccMoiA6pih.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	八：多人协作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		要查看远程库的信息 使用 git remote
	&lt;/li&gt;
	&lt;li&gt;
		要查看远程库的详细信息 使用 git remote –v
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如下演示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Kk2uZpVckjKWKjW.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	一：推送分支：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 使用命令 git push origin master
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	比如我现在的github上的readme.txt代码如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/G45HYfR2BPubh4T.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	本地的readme.txt代码如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/XEu5Lz39y94KrzV.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/jo9RlDYx6j1jqwF.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/sp32vHuvyKtT8cp.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	那么一般情况下，那些分支要推送呢？
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		master分支是主分支，因此要时刻与远程同步。
	&lt;/li&gt;
	&lt;li&gt;
		一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	二：抓取分支：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	但是我首先要把dev分支也要推送到远程去，如下
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Twa7t5t0Q6dSj4e.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	接着进入testgit2目录，进行克隆远程的库到本地来，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/748B1hNluikmF67.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在目录下生成有如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/vEepSi2BsD55bRr.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout&amp;nbsp; –b dev origin/dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/gSalePon0FLWxFr.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/aw0up84J09iIiw0.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/hqJy2sBT2kF0941.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Zv5d64sk1BxUZeI.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	我们可以先来看看readme.txt内容了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/eFYhDVoq1O88gdD.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：&lt;br /&gt;
&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/XXbPRkyZmmsVh56.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	因此：多人协作工作模式一般是这样的：
&lt;/p&gt;
&lt;ol style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&lt;li&gt;
		首先，可以试图用git push origin branch-name推送自己的修改.
	&lt;/li&gt;
	&lt;li&gt;
		如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。
	&lt;/li&gt;
	&lt;li&gt;
		如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	Git基本常用命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; mkdir：&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XX (创建一个空目录 XX指目录名)
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; pwd：&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 显示当前目录的路径。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git init&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 把当前的目录变成可以管理的git仓库，生成隐藏.git文件。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git add XX&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 把xx文件添加到暂存区去。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git commit –m “XX”&amp;nbsp; 提交文件 –m 后面的是注释。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git status&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 查看仓库状态
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git diff&amp;nbsp; XX&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 查看XX文件修改了那些内容
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git log&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 查看历史记录
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git reset&amp;nbsp; –hard HEAD^ 或者 git reset&amp;nbsp; –hard HEAD~ 回退到上一个版本
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (如果想回退到100个版本，使用git reset –hard HEAD~100 )
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; cat XX&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 查看XX文件内容
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git reflog&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 查看历史记录的版本号id
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git checkout — XX&amp;nbsp; 把XX文件在工作区的修改全部撤销。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git rm XX&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 删除XX文件
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git remote add origin&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/tugenhua0707/testgit&quot;&gt;https://github.com/tugenhua0707/testgit&lt;/a&gt;&amp;nbsp;关联一个远程库
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git clone&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/tugenhua0707/testgit&quot;&gt;https://github.com/tugenhua0707/testgit&lt;/a&gt;&amp;nbsp; 从远程库中克隆
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git checkout –b dev&amp;nbsp; 创建dev分支 并切换到dev分支上
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git branch&amp;nbsp; 查看当前所有的分支
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git checkout master 切换回master分支
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git merge dev&amp;nbsp; &amp;nbsp;&amp;nbsp;在当前的分支上合并dev分支
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git branch –d dev 删除dev分支
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git branch name&amp;nbsp; 创建分支
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git stash list 查看所有被隐藏的文件列表
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git stash apply 恢复被隐藏的文件，但是内容不删除
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git stash drop 删除文件
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git stash pop 恢复文件的同时 也删除文件
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git remote 查看远程库的信息
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git remote –v 查看远程库的详细信息
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git push origin master&amp;nbsp; Git会把master分支推送到远程库对应的远程分支上
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;&quot;&gt;
	&amp;nbsp; &amp;nbsp;来源：http://blog.csdn.net/zhang1027963459/article/details/50478340
&lt;/p&gt;
&lt;span style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;line-height:22.5px;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;line-height:22.5px;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#2E2E2E;font-size:15px;line-height:22.5px;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;font-size:15px;line-height:22.5px;&quot;&gt;&lt;/span&gt; 
&lt;p&gt;
	&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
	&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
	&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
	&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;
	&lt;br /&gt;
&lt;/p&gt;','1482907043') [ RunTime:0.0170s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.004000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.082005s ]
INFO: [ view_parse ] --END-- [ RunTime:0.084005s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.005000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.004000s ]

[ 2016-12-28T14:37:26+08:00 ] 127.0.0.1 /admin/index/article.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.002000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.072004s ]
INFO: [ view_parse ] --END-- [ RunTime:0.073004s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001000s ]
INFO: [ app_end ] --END-- [ RunTime:0.005001s ]

[ 2016-12-28T14:37:29+08:00 ] 127.0.0.1 /admin/index/lists.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.003000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.005000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::save() should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::delete() should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0070s ]
NOTIC: [8] Undefined variable: arr D:\WWW\tools\Application\Admin\Controller\IndexController.class.php 第 96 行.
SQL: SELECT * FROM `article` ORDER BY id desc LIMIT 0,10   [ RunTime:0.0790s ]
SQL: SELECT COUNT(*) AS tp_count FROM `article` LIMIT 1   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003001s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.157009s ]
INFO: [ view_parse ] --END-- [ RunTime:0.160009s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.004001s ]

[ 2016-12-28T14:38:27+08:00 ] 127.0.0.1 /admin/index/delete.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.004001s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::save() should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::delete() should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0070s ]
SQL: SELECT * FROM `article` WHERE `id` = 35 LIMIT 1   [ RunTime:0.0020s ]
SQL: DELETE FROM `article` WHERE `id` = 35 [ RunTime:0.0010s ]

[ 2016-12-28T14:38:32+08:00 ] 127.0.0.1 /admin/index/article.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.004001s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.069004s ]
INFO: [ view_parse ] --END-- [ RunTime:0.071004s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004001s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.009001s ]
INFO: [ app_end ] --END-- [ RunTime:0.020001s ]

[ 2016-12-28T14:39:38+08:00 ] 127.0.0.1 /admin/index/SaveArticle.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::save() should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::delete() should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
SQL: INSERT INTO `article` (`type`,`title`,`keyword`,`author`,`content`,`createtime`) VALUES ('0',' 手把手教你使用git GitHub创建管理仓库','','小兔','&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;一：&lt;a href=&quot;http://lib.csdn.net/base/git&quot; class=&quot;replace_word&quot; target=&quot;_blank&quot;&gt;Git&lt;/a&gt;是什么？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Git是目前世界上最先进的分布式&lt;a href=&quot;http://lib.csdn.net/base/git&quot; class=&quot;replace_word&quot; target=&quot;_blank&quot;&gt;版本控制&lt;/a&gt;系统。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;二：SVN与Git的最主要的区别？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;三：在windows上如何安装Git？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; msysgit是 windows版的Git,如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/o2sq90a8T1NaPYA.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git –&amp;gt; Git Bash”,如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/lp1nSRj5Ltl3pse.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/csN7xjb2FNqB3tU.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	安装完成后，还需要最后一步设置，在命令行输入如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/2uOKiOzut5eL8Pl.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;&amp;nbsp; &amp;nbsp;注意：&lt;/span&gt;git config&amp;nbsp; –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;四：如何操作？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;一：创建版本库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 所以创建一个版本库也非常简单，如下我是D盘 –&amp;gt; www下 目录下新建一个testgit版本库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/tws0e0u9ARaTECl.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	pwd 命令是用于显示当前的目录。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 1. 通过命令 git init 把这个目录变成git可以管理的仓库，如下：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/2Qx5J5PgxNVVX5m.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/X4k5zhvLhfZ7xqT.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;2. 把文件添加到版本库中。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;下面先看下demo如下演示：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/4O2Dj45iOzM8OD7.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;如果和上面一样，没有任何提示，说明已经添加成功了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;第二步：用命令 git commit告诉Git，把文件提交到仓库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/gSVl34wg2XWifDA.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/e0Mitrw1Hmd18k8.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/m1hOLqCvl1214Bm.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git diff readme.txt 如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/aEtXW9bW0lLhUA1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add&amp;nbsp; 第二步是：git commit)。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/nJM4ab8Mdc1otuY.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	二：版本回退：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	内容为33333333333333.继续执行命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/wlZAYLxGlsVwf31.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/87gLdKTPa49l1wa.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Fm1aewV1pJLFiy1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset&amp;nbsp; –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset&amp;nbsp; –hard HEAD~100 即可。未回退之前的readme.txt内容如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/G1lW1evv9V2MNL5.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如果想回退到上一个版本的命令如下操作：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/VJr1aQKaj61ECTV.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	再来查看下 readme.txt内容如下：通过命令cat readme.txt查看
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/rdkpVcDY9w6rYrW.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/BuLiu73xIEY2hzU.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git reset&amp;nbsp; –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog&amp;nbsp; 演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/YZcHF7wJf99Oyef.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git reset&amp;nbsp; –hard 6fcfc89来恢复了。演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/nXT323O8nV6a4Ri.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以看到 目前已经是最新的版本了。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	三：理解工作区与暂存区的区别？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;工作区：&lt;/span&gt;就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 版本库(Repository)：&lt;/span&gt;工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们前面说过使用Git提交文件到版本库有两步：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; 第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; 第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们继续使用demo来演示下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/b9UuNC0dOH4Bv4I.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/sn5O8GAQ5qZlMw4.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接着我们可以使用git commit一次性提交到分支上，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6AE9HgpXdc76U2d.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	四：Git撤销修改和删除文件操作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;一：撤销修改：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp; 比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ITYmn14E6YL414S.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset&amp;nbsp; –hard HEAD^
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/7ocs9VvtIAh4hM6.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以发现，Git会告诉你，git checkout&amp;nbsp; — file 可以丢弃工作区的修改，如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git checkout&amp;nbsp; –&amp;nbsp; readme.txt,如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/NMjUUcsgS8ZYoAv.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。
	&lt;/li&gt;
	&lt;li&gt;
		另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/4pE2a8uD0X2Dcii.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;注意：&lt;/span&gt;命令git checkout — readme.txt 中的 — 很重要，如果没有 — 的话，那么命令变成创建分支了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;二：删除文件。&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/T8ymcNhSNHAiGOi.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6f7e89Y37MwTd8Y.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以使用如下命令 git checkout&amp;nbsp; — b.txt，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/par21Dv7W1A8IPO.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	再来看看我们testgit目录，添加了3个文件了。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/02urwtw6DVAnJfg.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	五：远程仓库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	ssh-keygen&amp;nbsp; -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/UBOTgNTV5h1ZOri.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/mnef9Tc09uje9eX.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	点击 Add Key，你就应该可以看到已经添加的key。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/S96fD2wzD37Jxpt.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		如何添加远程库？
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/19BeDiENJXE9GNp.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/w2WTA0U431O3zbk.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git remote add origin https://github.com/tugenhua0707/testgit.git
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	所有的如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/7o4qRv4CB7hl9e4.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/O25Yr99V8x0vqUi.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	从现在起，只要本地作了提交，就可以通过如下命令：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git push origin master
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	2. 如何从远程库克隆？
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	上面我们了解了先有本地库，后有远程库时候，如何关联远程库。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	首先，登录github，创建一个新的仓库，名字叫testgit2.如下：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/vzDBsZX3lxyJ11v.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如下，我们看到：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Bjg05Ld6Q81GpGj.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Ct04CpbZV2t0dLN.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接着在我本地目录下 生成testgit2目录了，如下所示：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/70zpZZxzr12cQQ5.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	六：创建与合并分支。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	在 &amp;nbsp;版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	首先，我们来创建dev分支，然后切换到dev分支上。如下操作：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/S2lU108tKpKstcI.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git branch dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git checkout dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/fU0DEn8lf4VK777.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/RcUdLM1njPl7z9j.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6fZSt1kb1xo1QV1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	注意到上面的&lt;span&gt;Fast-forward&lt;/span&gt;信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	合并完成后，我们可以接着删除dev分支了，操作如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/TEJAOfc6j2RCCg6.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	总结创建与合并分支命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 查看分支：git branch
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 创建分支：git branch name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 切换分支：git checkout name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	创建+切换分支：git checkout –b name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	合并某分支到当前分支：git merge name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	删除分支：git branch –d name
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		如何解决冲突？
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/h0r8aI5vhQ41ONc.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/XM7c8z25uGU7pQV.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们需要在master分支上来合并fenzhi1，如下操作：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/F9G24HDyf99wKuF.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	Git用&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;，=======，&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;标记出不同分支的内容，其中&amp;lt;&amp;lt;&amp;lt;HEAD是指主分支修改的内容，&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/1PQZa2cFls2Hw2F.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/u47S787N75cDjTu.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 3.分支管理策略。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		创建一个dev分支。
	&lt;/li&gt;
	&lt;li&gt;
		修改readme.txt内容。
	&lt;/li&gt;
	&lt;li&gt;
		添加到暂存区。
	&lt;/li&gt;
	&lt;li&gt;
		切换回主分支(master)。
	&lt;/li&gt;
	&lt;li&gt;
		合并dev分支，使用命令 git merge –no-ff&amp;nbsp; -m “注释” dev
	&lt;/li&gt;
	&lt;li&gt;
		查看历史记录
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	截图如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/gY6TA89iDmN22aO.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;分支策略：&lt;/span&gt;首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	七：bug分支：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/rWq5N8Ny4JR248p.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/huS12omxQQ5kh5u.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;所以现在我可以通过创建issue-404分支来修复bug了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/T804DWwfvGm18Tg.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/vMwMv1PbOJ3Oo38.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在，我们回到dev分支上干活了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Yc3ia3qFwdvOyl0.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9m5A80QY8ohv7ey.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。
	&lt;/li&gt;
	&lt;li&gt;
		另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 演示如下
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/pEiL0k6SvoM1LO1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	八：多人协作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		要查看远程库的信息 使用 git remote
	&lt;/li&gt;
	&lt;li&gt;
		要查看远程库的详细信息 使用 git remote –v
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如下演示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/RYgKDPzFbH7S4z2.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;一：推送分支：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 使用命令 git push origin master
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	比如我现在的github上的readme.txt代码如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/UzwGTlxdu4RP9H8.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	本地的readme.txt代码如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/EVnJe55uofnQ2NC.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/TO2rUAVBGW8hDgD.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/oAvgBU4Ovr37rqQ.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	那么一般情况下，那些分支要推送呢？
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		master分支是主分支，因此要时刻与远程同步。
	&lt;/li&gt;
	&lt;li&gt;
		一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;二：抓取分支：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	但是我首先要把dev分支也要推送到远程去，如下
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9FF41aJvnTr1dGR.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接着进入testgit2目录，进行克隆远程的库到本地来，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/zcL94SPxKu8F5ql.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在目录下生成有如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/h4M5S4qKZ772s95.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout&amp;nbsp; –b dev origin/dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6w53aZ2VVqrrCu6.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/06z9Qsvz7l75i2K.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/4xms5lqgTpRBPG8.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;git pull&lt;/span&gt;也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/1u0I95m3qLeD93K.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	这回&lt;span&gt;git pull&lt;/span&gt;成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的 解决冲突完全一样。解决后，提交，再push：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们可以先来看看readme.txt内容了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/T9LBuE1TwObaFmf.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在手动已经解决完了，我接在需要再提交，再push到远程库里面去。如下所示：&lt;br /&gt;
&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/vuX6sm9S80BYcWT.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	因此：多人协作工作模式一般是这样的：
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		首先，可以试图用git push origin branch-name推送自己的修改.
	&lt;/li&gt;
	&lt;li&gt;
		如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并。
	&lt;/li&gt;
	&lt;li&gt;
		如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;Git基本常用命令如下：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; mkdir：&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XX (创建一个空目录 XX指目录名)
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; pwd：&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 显示当前目录的路径。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git init&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 把当前的目录变成可以管理的git仓库，生成隐藏.git文件。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git add XX&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 把xx文件添加到暂存区去。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git commit –m “XX”&amp;nbsp; 提交文件 –m 后面的是注释。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git status&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 查看仓库状态
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git diff&amp;nbsp; XX&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 查看XX文件修改了那些内容
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git log&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 查看历史记录
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git reset&amp;nbsp; –hard HEAD^ 或者 git reset&amp;nbsp; –hard HEAD~ 回退到上一个版本
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (如果想回退到100个版本，使用git reset –hard HEAD~100 )
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; cat XX&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 查看XX文件内容
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git reflog&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 查看历史记录的版本号id
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git checkout — XX&amp;nbsp; 把XX文件在工作区的修改全部撤销。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git rm XX&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 删除XX文件
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git remote add origin&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/tugenhua0707/testgit&quot;&gt;https://github.com/tugenhua0707/testgit&lt;/a&gt;&amp;nbsp;关联一个远程库
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git clone&amp;nbsp;&lt;a target=&quot;_blank&quot; href=&quot;https://github.com/tugenhua0707/testgit&quot;&gt;https://github.com/tugenhua0707/testgit&lt;/a&gt;&amp;nbsp; 从远程库中克隆
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git checkout –b dev&amp;nbsp; 创建dev分支 并切换到dev分支上
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git branch&amp;nbsp; 查看当前所有的分支
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git checkout master 切换回master分支
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git merge dev&amp;nbsp; &amp;nbsp;&amp;nbsp;在当前的分支上合并dev分支
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git branch –d dev 删除dev分支
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git branch name&amp;nbsp; 创建分支
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git stash list 查看所有被隐藏的文件列表
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git stash apply 恢复被隐藏的文件，但是内容不删除
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git stash drop 删除文件
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git stash pop 恢复文件的同时 也删除文件
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git remote 查看远程库的信息
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git remote –v 查看远程库的详细信息
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;git push origin master&amp;nbsp; Git会把master分支推送到远程库对应的远程分支上
&lt;/p&gt;','1482907178') [ RunTime:0.0060s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.033002s ]
INFO: [ view_parse ] --END-- [ RunTime:0.035002s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.004001s ]

[ 2016-12-28T14:39:40+08:00 ] 127.0.0.1 /admin/index/article.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003001s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0120s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.070004s ]
INFO: [ view_parse ] --END-- [ RunTime:0.072004s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.007000s ]

[ 2016-12-28T14:39:43+08:00 ] 127.0.0.1 /admin/index/lists.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003001s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0130s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::save() should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::delete() should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0050s ]
NOTIC: [8] Undefined variable: arr D:\WWW\tools\Application\Admin\Controller\IndexController.class.php 第 96 行.
SQL: SELECT * FROM `article` ORDER BY id desc LIMIT 0,10   [ RunTime:0.0070s ]
SQL: SELECT COUNT(*) AS tp_count FROM `article` LIMIT 1   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.002000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.004000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.135007s ]
INFO: [ view_parse ] --END-- [ RunTime:0.137007s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.001001s ]
INFO: [ view_filter ] --END-- [ RunTime:0.003001s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.005000s ]

[ 2016-12-28T14:40:00+08:00 ] 127.0.0.1 /admin/index/article/id/36.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002001s ]
INFO: [ app_begin ] --END-- [ RunTime:0.004001s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0110s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::save() should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::delete() should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
SQL: SELECT * FROM `article` WHERE `id` = 36 LIMIT 1   [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003001s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.070004s ]
INFO: [ view_parse ] --END-- [ RunTime:0.072004s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.001000s ]
INFO: [ app_end ] --END-- [ RunTime:0.025001s ]

[ 2016-12-28T14:47:11+08:00 ] 127.0.0.1 /admin/index/lists.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.004000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.003000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.006000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0360s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::save() should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::delete() should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
NOTIC: [8] Undefined variable: arr D:\WWW\tools\Application\Admin\Controller\IndexController.class.php 第 96 行.
SQL: SELECT * FROM `article` ORDER BY id desc LIMIT 0,10   [ RunTime:0.0090s ]
SQL: SELECT COUNT(*) AS tp_count FROM `article` LIMIT 1   [ RunTime:0.0010s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.130007s ]
INFO: [ view_parse ] --END-- [ RunTime:0.132007s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002001s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004001s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.003000s ]
INFO: [ app_end ] --END-- [ RunTime:0.008000s ]

[ 2016-12-28T14:49:29+08:00 ] 127.0.0.1 /admin/index/article/id/36.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.004000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.002001s ]
INFO: [ app_begin ] --END-- [ RunTime:0.005001s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0090s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::save() should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::delete() should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0050s ]
SQL: SELECT * FROM `article` WHERE `id` = 36 LIMIT 1   [ RunTime:0.0030s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.069004s ]
INFO: [ view_parse ] --END-- [ RunTime:0.071004s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.002000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.002000s ]
INFO: [ app_end ] --END-- [ RunTime:0.006001s ]

[ 2016-12-28T14:50:00+08:00 ] 127.0.0.1 /admin/index/SaveArticle.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.001000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003001s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.003000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0130s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0010s ]
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::save() should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::delete() should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0080s ]
SQL: UPDATE `article` SET `type`='0',`title`=' 手把手教你使用git GitHub创建管理仓库',`keyword`='',`author`='小兔',`content`='&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;一：&lt;a href=&quot;http://lib.csdn.net/base/git&quot; class=&quot;replace_word&quot; target=&quot;_blank&quot;&gt;Git&lt;/a&gt;是什么？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;Git是目前世界上最先进的分布式&lt;a href=&quot;http://lib.csdn.net/base/git&quot; class=&quot;replace_word&quot; target=&quot;_blank&quot;&gt;版本控制&lt;/a&gt;系统。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;二：SVN与Git的最主要的区别？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;三：在windows上如何安装Git？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; msysgit是 windows版的Git,如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/o2sq90a8T1NaPYA.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;需要从网上下载一个，然后进行默认安装即可。安装完成后，在开始菜单里面找到 “Git –&amp;gt; Git Bash”,如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/lp1nSRj5Ltl3pse.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	会弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/csN7xjb2FNqB3tU.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	安装完成后，还需要最后一步设置，在命令行输入如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/2uOKiOzut5eL8Pl.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; 因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;&amp;nbsp; &amp;nbsp;注意：&lt;/span&gt;git config&amp;nbsp; –global 参数，有了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;四：如何操作？&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;一：创建版本库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 所以创建一个版本库也非常简单，如下我是D盘 –&amp;gt; www下 目录下新建一个testgit版本库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/tws0e0u9ARaTECl.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	pwd 命令是用于显示当前的目录。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 1. 通过命令 git init 把这个目录变成git可以管理的仓库，如下：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/2Qx5J5PgxNVVX5m.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/X4k5zhvLhfZ7xqT.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;2. 把文件添加到版本库中。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;下面先看下demo如下演示：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;我在版本库testgit目录下新建一个记事本文件 readme.txt 内容如下：11111111
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;第一步：使用命令 git add readme.txt添加到暂存区里面去。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/4O2Dj45iOzM8OD7.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;如果和上面一样，没有任何提示，说明已经添加成功了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;第二步：用命令 git commit告诉Git，把文件提交到仓库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/gSVl34wg2XWifDA.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令git status来查看是否还有文件未提交，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/e0Mitrw1Hmd18k8.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;说明没有任何文件未提交，但是我现在继续来改下readme.txt内容，比如我在下面添加一行2222222222内容，继续使用git status来查看下结果，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/m1hOLqCvl1214Bm.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	上面的命令告诉我们 readme.txt文件已被修改，但是未被提交的修改。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git diff readme.txt 如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/aEtXW9bW0lLhUA1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如上可以看到，readme.txt文件内容从一行11111111改成 二行 添加了一行22222222内容。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的2步(第一步是git add&amp;nbsp; 第二步是：git commit)。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/nJM4ab8Mdc1otuY.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	二：版本回退：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;如上，我们已经学会了修改文件，现在我继续对readme.txt文件进行修改，再增加一行
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	内容为33333333333333.继续执行命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/wlZAYLxGlsVwf31.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查呢？我们现在可以使用命令 git log 演示如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/87gLdKTPa49l1wa.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Fm1aewV1pJLFiy1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset&amp;nbsp; –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset&amp;nbsp; –hard HEAD~100 即可。未回退之前的readme.txt内容如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/G1lW1evv9V2MNL5.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如果想回退到上一个版本的命令如下操作：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/VJr1aQKaj61ECTV.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	再来查看下 readme.txt内容如下：通过命令cat readme.txt查看
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/rdkpVcDY9w6rYrW.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以看到，内容已经回退到上一个版本了。我们可以继续使用git log 来查看下历史记录信息，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/BuLiu73xIEY2hzU.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们看到 增加333333 内容我们没有看到了，但是现在我想回退到最新的版本，如：有333333的内容要如何恢复呢？我们可以通过版本号回退，使用命令方法如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git reset&amp;nbsp; –hard 版本号 ，但是现在的问题假如我已经关掉过一次命令行或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？可以通过如下命令即可获取到版本号：git reflog&amp;nbsp; 演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/YZcHF7wJf99Oyef.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	通过上面的显示我们可以知道，增加内容3333的版本号是 6fcfc89.我们现在可以命令
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git reset&amp;nbsp; –hard 6fcfc89来恢复了。演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/nXT323O8nV6a4Ri.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以看到 目前已经是最新的版本了。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	三：理解工作区与暂存区的区别？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;span&gt;工作区：&lt;/span&gt;就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; 版本库(Repository)：&lt;/span&gt;工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们前面说过使用Git提交文件到版本库有两步：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; 第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; 第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们继续使用demo来演示下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令 git status来查看下状态，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/b9UuNC0dOH4Bv4I.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/sn5O8GAQ5qZlMw4.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接着我们可以使用git commit一次性提交到分支上，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6AE9HgpXdc76U2d.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	四：Git撤销修改和删除文件操作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;一：撤销修改：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp; 比如我现在在readme.txt文件里面增加一行 内容为555555555555，我们先通过命令查看如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/ITYmn14E6YL414S.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	在我未提交之前，我发现添加5555555555555内容有误，所以我得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	第一：如果我知道要删掉那些内容的话，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	第二：我可以按以前的方法直接恢复到上一个版本。使用 git reset&amp;nbsp; –hard HEAD^
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/7ocs9VvtIAh4hM6.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以发现，Git会告诉你，git checkout&amp;nbsp; — file 可以丢弃工作区的修改，如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git checkout&amp;nbsp; –&amp;nbsp; readme.txt,如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/NMjUUcsgS8ZYoAv.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下：
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。
	&lt;/li&gt;
	&lt;li&gt;
		另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	对于第二种情况，我想我们继续做demo来看下，假如现在我对readme.txt添加一行 内容为6666666666666，我git add 增加到暂存区后，接着添加内容7777777，我想通过撤销命令让其回到暂存区后的状态。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/4pE2a8uD0X2Dcii.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;注意：&lt;/span&gt;命令git checkout — readme.txt 中的 — 很重要，如果没有 — 的话，那么命令变成创建分支了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;二：删除文件。&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/T8ymcNhSNHAiGOi.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉，现在目录是这样的，
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6f7e89Y37MwTd8Y.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	只要没有commit之前，如果我想在版本库中恢复此文件如何操作呢？
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以使用如下命令 git checkout&amp;nbsp; — b.txt，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/par21Dv7W1A8IPO.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	再来看看我们testgit目录，添加了3个文件了。如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/02urwtw6DVAnJfg.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	五：远程仓库。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp;第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	ssh-keygen&amp;nbsp; -t rsa –C “youremail@example.com”, 由于我本地此前运行过一次，所以本地有，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/UBOTgNTV5h1ZOri.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id_rsa.pub文件的内容。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/mnef9Tc09uje9eX.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	点击 Add Key，你就应该可以看到已经添加的key。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/S96fD2wzD37Jxpt.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		如何添加远程库？
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/19BeDiENJXE9GNp.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/w2WTA0U431O3zbk.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git remote add origin https://github.com/tugenhua0707/testgit.git
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	所有的如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/7o4qRv4CB7hl9e4.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了，上面的要输入github的用户名和密码如下所示：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/O25Yr99V8x0vqUi.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	从现在起，只要本地作了提交，就可以通过如下命令：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git push origin master
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	2. 如何从远程库克隆？
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	上面我们了解了先有本地库，后有远程库时候，如何关联远程库。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	首先，登录github，创建一个新的仓库，名字叫testgit2.如下：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/vzDBsZX3lxyJ11v.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如下，我们看到：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Bjg05Ld6Q81GpGj.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下所示：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Ct04CpbZV2t0dLN.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接着在我本地目录下 生成testgit2目录了，如下所示：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/70zpZZxzr12cQQ5.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	六：创建与合并分支。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	在 &amp;nbsp;版本回填退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	首先，我们来创建dev分支，然后切换到dev分支上。如下操作：
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/S2lU108tKpKstcI.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git checkout 命令加上 –b参数表示创建并切换，相当于如下2条命令
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git branch dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git checkout dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	首先我们先来查看下readme.txt内容，接着添加内容77777777，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/fU0DEn8lf4VK777.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/RcUdLM1njPl7z9j.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/6fZSt1kb1xo1QV1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	注意到上面的&lt;span&gt;Fast-forward&lt;/span&gt;信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	合并完成后，我们可以接着删除dev分支了，操作如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/TEJAOfc6j2RCCg6.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	总结创建与合并分支命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 查看分支：git branch
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 创建分支：git branch name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp; 切换分支：git checkout name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	创建+切换分支：git checkout –b name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	合并某分支到当前分支：git merge name
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	删除分支：git branch –d name
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		如何解决冲突？
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	下面我们还是一步一步来，先新建一个新分支，比如名字叫fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/h0r8aI5vhQ41ONc.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	同样，我们现在切换到master分支上来，也在最后一行添加内容，内容为99999999，如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/XM7c8z25uGU7pQV.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们需要在master分支上来合并fenzhi1，如下操作：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/F9G24HDyf99wKuF.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	Git用&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;，=======，&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;标记出不同分支的内容，其中&amp;lt;&amp;lt;&amp;lt;HEAD是指主分支修改的内容，&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;fenzhi1 是指fenzhi1上修改的内容，我们可以修改下如下后保存：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/1PQZa2cFls2Hw2F.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如果我想查看分支合并的情况的话，需要使用命令 git log.命令行演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/u47S787N75cDjTu.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; 3.分支管理策略。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp; &amp;nbsp; 通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。首先我们来做demo演示下：
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		创建一个dev分支。
	&lt;/li&gt;
	&lt;li&gt;
		修改readme.txt内容。
	&lt;/li&gt;
	&lt;li&gt;
		添加到暂存区。
	&lt;/li&gt;
	&lt;li&gt;
		切换回主分支(master)。
	&lt;/li&gt;
	&lt;li&gt;
		合并dev分支，使用命令 git merge –no-ff&amp;nbsp; -m “注释” dev
	&lt;/li&gt;
	&lt;li&gt;
		查看历史记录
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	截图如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/gY6TA89iDmN22aO.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;分支策略：&lt;/span&gt;首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	七：bug分支：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	比如我在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。比如如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/rWq5N8Ny4JR248p.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/huS12omxQQ5kh5u.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp; &amp;nbsp;所以现在我可以通过创建issue-404分支来修复bug了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支，演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/T804DWwfvGm18Tg.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	修复完成后，切换到master分支上，并完成合并，最后删除issue-404分支。演示如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/vMwMv1PbOJ3Oo38.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在，我们回到dev分支上干活了。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/Yc3ia3qFwdvOyl0.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	工作区是干净的，那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9m5A80QY8ohv7ey.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		git stash apply恢复，恢复后，stash内容并不删除，你需要使用命令git stash drop来删除。
	&lt;/li&gt;
	&lt;li&gt;
		另一种方式是使用git stash pop,恢复的同时把stash内容也删除了。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 演示如下
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/pEiL0k6SvoM1LO1.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	八：多人协作。
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin。
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		要查看远程库的信息 使用 git remote
	&lt;/li&gt;
	&lt;li&gt;
		要查看远程库的详细信息 使用 git remote –v
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	如下演示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/RYgKDPzFbH7S4z2.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;一：推送分支：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 使用命令 git push origin master
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	比如我现在的github上的readme.txt代码如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/UzwGTlxdu4RP9H8.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	本地的readme.txt代码如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/EVnJe55uofnQ2NC.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我想把本地更新的readme.txt代码推送到远程库中，使用命令如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/TO2rUAVBGW8hDgD.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	我们可以看到如上，推送成功，我们可以继续来截图github上的readme.txt内容 如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/oAvgBU4Ovr37rqQ.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	可以看到 推送成功了，如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	那么一般情况下，那些分支要推送呢？
&lt;/p&gt;
&lt;ol style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;li&gt;
		master分支是主分支，因此要时刻与远程同步。
	&lt;/li&gt;
	&lt;li&gt;
		一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去。
	&lt;/li&gt;
&lt;/ol&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;span&gt;二：抓取分支：&lt;/span&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	但是我首先要把dev分支也要推送到远程去，如下
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/9FF41aJvnTr1dGR.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	接着进入testgit2目录，进行克隆远程的库到本地来，如下：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/zcL94SPxKu8F5ql.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在目录下生成有如下所示：
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	&lt;img alt=&quot;&quot; src=&quot;/Public/files/images/2016/12/28/h4M5S4qKZ772s95.jpg&quot; style=&quot;height:auto;&quot; /&gt; 
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout&amp;nbsp; –b dev origin/dev
&lt;/p&gt;
&lt;p align=&quot;left&quot; style=&quot;font-size:15px;color:#2E2E2E;font-family:&amp;quot;background-color:#FFFFFF;&quot;&gt;
	现在小伙伴们就可以在dev分支上做开发了，开发完成后把dev分支推送到远程库时。
&lt;/p&gt;

来源：http://blog.csdn.net/zhang1027963459/article/details/50478340
&lt;/div&gt;',`createtime`='1482907800' WHERE `id` = 36 [ RunTime:0.0060s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.002000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.006000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.046003s ]
INFO: [ view_parse ] --END-- [ RunTime:0.048003s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.003000s ]
INFO: [ view_filter ] --END-- [ RunTime:0.005000s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.004001s ]
INFO: [ app_end ] --END-- [ RunTime:0.007001s ]

[ 2016-12-28T14:50:08+08:00 ] 127.0.0.1 /admin/index/article/id/36.aspx
INFO: [ app_init ] --START--
INFO: Run Behavior\BuildLiteBehavior [ RunTime:0.000000s ]
INFO: [ app_init ] --END-- [ RunTime:0.003000s ]
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.003000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.005000s ]
SQL: SHOW COLUMNS FROM `statisticsip` [ RunTime:0.0120s ]
SQL: SELECT * FROM `statisticsip` WHERE `ip` = '127.0.0.1' AND `date` = 20161228 LIMIT 1   [ RunTime:0.0020s ]
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::save() should be compatible with Think\Model::save($data = '', $options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
NOTIC: [2048] Declaration of Admin\Model\ArticleModel::delete() should be compatible with Think\Model::delete($options = Array) D:\WWW\tools\Application\Admin\Model\ArticleModel.class.php 第 101 行.
SQL: SHOW COLUMNS FROM `article` [ RunTime:0.0060s ]
SQL: SELECT * FROM `article` WHERE `id` = 36 LIMIT 1   [ RunTime:0.0020s ]
INFO: [ view_parse ] --START--
INFO: [ template_filter ] --START--
INFO: Run Behavior\ContentReplaceBehavior [ RunTime:0.001000s ]
INFO: [ template_filter ] --END-- [ RunTime:0.003000s ]
INFO: Run Behavior\ParseTemplateBehavior [ RunTime:0.071004s ]
INFO: [ view_parse ] --END-- [ RunTime:0.074004s ]
INFO: [ view_filter ] --START--
INFO: Run Behavior\WriteHtmlCacheBehavior [ RunTime:0.003001s ]
INFO: [ view_filter ] --END-- [ RunTime:0.004001s ]
INFO: [ app_end ] --START--
INFO: Run Behavior\ShowPageTraceBehavior [ RunTime:0.006000s ]
INFO: [ app_end ] --END-- [ RunTime:0.008000s ]

